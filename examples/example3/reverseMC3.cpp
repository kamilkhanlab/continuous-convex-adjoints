#include "reverseMC3.hpp"              /* access to Reverse mode of subgradient evaluations */
/*
* Reverse mode of automatic differentiation
* Computations of df/dx required by evalutaing fB
*/
N_Vector fRevAD_dfdx(MC xMC[NX], MC pMC[NP], double sub[NRev * NRev], int n, int k)
{
    SUNContext sunctx;
    SUNContext_Create(NULL, &sunctx);
    RevMC vBar[L];
    MC v[L];
    N_Vector adcvcc = N_VNew_Serial(NRev * NX, sunctx);
    for (int j = 0; j < NRev * NX; j++)
    {
        Ith(adcvcc, j + 1) = 0;
    }

    double** vsub = new double*[L];
    for(int i = 0; i < L; i++) {
        vsub[i] = new double[NRev * 2];
    }

    
    /*
    *-----------------------------------------------------------------
    * The following code was automatically generated by ReverseMC.jl.
    *-----------------------------------------------------------------
    */
            
    switch (n)
    {

    case 0:
        v[0] = xMC[0];
        v[1] = xMC[1];
        v[2] = xMC[2];
        v[3] = xMC[3];
        v[4] = xMC[4];
        v[5] = pMC[0];
        v[6] = pMC[1];
        v[7] = pMC[2];
        v[8] = pMC[3];
        v[9] = pMC[4];
        v[10] = pMC[5];
        v[11] = pMC[6];
        v[12] = pMC[7];
        v[13] = 1.0;

        v[2].sub(NRev, &sub[0], &sub[4]);
        v[14] = v[13] / v[2];

        for (int i = 0; i < NRev; i++)
        {
           vsub[14][i] = v[14].cvsub(i);
           vsub[14][NRev + i] = v[14].ccsub(i);
        }
    
        v[15] = 7.1;

        v[14].sub(NRev, &sub[0], &sub[4]);
        v[16] = v[15] * v[14];

        for (int i = 0; i < NRev; i++)
        {
           vsub[16][i] = v[16].cvsub(i);
           vsub[16][NRev + i] = v[16].ccsub(i);
        }
    
        v[17] = 1.0;

        v[16].sub(NRev, &sub[0], &sub[4]);
        v[18] = v[17] + v[16];

        for (int i = 0; i < NRev; i++)
        {
           vsub[18][i] = v[18].cvsub(i);
           vsub[18][NRev + i] = v[18].ccsub(i);
        }
    
        v[19] = 1.0;

        v[18].sub(NRev, &sub[0], &sub[4]);
        v[20] = v[19] / v[18];

        for (int i = 0; i < NRev; i++)
        {
           vsub[20][i] = v[20].cvsub(i);
           vsub[20][NRev + i] = v[20].ccsub(i);
        }
    
        v[21] = 1.2;

        v[20].sub(NRev, &sub[0], &sub[4]);
        v[22] = v[21] * v[20];

        for (int i = 0; i < NRev; i++)
        {
           vsub[22][i] = v[22].cvsub(i);
           vsub[22][NRev + i] = v[22].ccsub(i);
        }
    
        v[23] = 1.0;

        v[3].sub(NRev, &sub[0], &sub[4]);
        v[24] = v[23] / v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[24][i] = v[24].cvsub(i);
           vsub[24][NRev + i] = v[24].ccsub(i);
        }
    

        v[24].sub(NRev, &sub[8], &sub[12]);
        v[25] = v[11] * v[24];

        for (int i = 0; i < NRev; i++)
        {
           vsub[25][i] = v[25].cvsub(i);
           vsub[25][NRev + i] = v[25].ccsub(i);
        }
    
        v[26] = 0.00390625;
        v[3].sub(NRev, &sub[0], &sub[4]);

        v[27] = v[3] * v[26];

        for (int i = 0; i < NRev; i++)
        {
           vsub[27][i] = v[27].cvsub(i);
           vsub[27][NRev + i] = v[27].ccsub(i);
        }
    
        v[28] = 1.0;

        v[25].sub(NRev, &sub[0], &sub[4]);
        v[29] = v[28] + v[25];

        for (int i = 0; i < NRev; i++)
        {
           vsub[29][i] = v[29].cvsub(i);
           vsub[29][NRev + i] = v[29].ccsub(i);
        }
    
        v[29].sub(NRev, &sub[8], &sub[12]);
        v[27].sub(NRev, &sub[0], &sub[4]);
        v[30] = v[29] + v[27];

        for (int i = 0; i < NRev; i++)
        {
           vsub[30][i] = v[30].cvsub(i);
           vsub[30][NRev + i] = v[30].ccsub(i);
        }
    
        v[31] = 1.0;

        v[30].sub(NRev, &sub[0], &sub[4]);
        v[32] = v[31] / v[30];

        for (int i = 0; i < NRev; i++)
        {
           vsub[32][i] = v[32].cvsub(i);
           vsub[32][NRev + i] = v[32].ccsub(i);
        }
    
        v[33] = 0.74;

        v[32].sub(NRev, &sub[0], &sub[4]);
        v[34] = v[33] * v[32];

        for (int i = 0; i < NRev; i++)
        {
           vsub[34][i] = v[34].cvsub(i);
           vsub[34][NRev + i] = v[34].ccsub(i);
        }
    
        v[4].sub(NRev, &sub[8], &sub[12]);
        v[3].sub(NRev, &sub[0], &sub[4]);
        v[35] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[35][i] = v[35].cvsub(i);
           vsub[35][NRev + i] = v[35].ccsub(i);
        }
    
        v[36] = 34.0;
        v[35].sub(NRev, &sub[0], &sub[4]);

        v[37] = v[35] - v[36];

        for (int i = 0; i < NRev; i++)
        {
           vsub[37][i] = v[37].cvsub(i);
           vsub[37][NRev + i] = v[37].ccsub(i);
        }
    
        v[38] = 0.050505050505050504;


        v[39] = v[10] * v[38];

        for (int i = 0; i < NRev; i++)
        {
           vsub[39][i] = v[39].cvsub(i);
           vsub[39][NRev + i] = v[39].ccsub(i);
        }
    
        v[39].sub(NRev, &sub[8], &sub[12]);
        v[34].sub(NRev, &sub[0], &sub[4]);
        v[40] = v[39] * v[34];

        for (int i = 0; i < NRev; i++)
        {
           vsub[40][i] = v[40].cvsub(i);
           vsub[40][NRev + i] = v[40].ccsub(i);
        }
    
        v[40].sub(NRev, &sub[8], &sub[12]);
        v[1].sub(NRev, &sub[0], &sub[4]);
        v[41] = v[40] * v[1];

        for (int i = 0; i < NRev; i++)
        {
           vsub[41][i] = v[41].cvsub(i);
           vsub[41][NRev + i] = v[41].ccsub(i);
        }
    
        v[37].sub(NRev, &sub[0], &sub[4]);
        v[41].sub(NRev, &sub[8], &sub[12]);
        v[42] = v[37] + v[41];

        for (int i = 0; i < NRev; i++)
        {
           vsub[42][i] = v[42].cvsub(i);
           vsub[42][NRev + i] = v[42].ccsub(i);
        }
    
        v[4].sub(NRev, &sub[8], &sub[12]);
        v[3].sub(NRev, &sub[0], &sub[4]);
        v[43] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[43][i] = v[43].cvsub(i);
           vsub[43][NRev + i] = v[43].ccsub(i);
        }
    
        v[44] = 50.0;
        v[43].sub(NRev, &sub[0], &sub[4]);

        v[45] = v[43] - v[44];

        for (int i = 0; i < NRev; i++)
        {
           vsub[45][i] = v[45].cvsub(i);
           vsub[45][NRev + i] = v[45].ccsub(i);
        }
    
        v[46] = 0.5;

        v[42].sub(NRev, &sub[0], &sub[4]);
        v[47] = v[46] * v[42];

        for (int i = 0; i < NRev; i++)
        {
           vsub[47][i] = v[47].cvsub(i);
           vsub[47][NRev + i] = v[47].ccsub(i);
        }
    
        v[45].sub(NRev, &sub[0], &sub[4]);
        v[47].sub(NRev, &sub[8], &sub[12]);
        v[48] = v[45] - v[47];

        for (int i = 0; i < NRev; i++)
        {
           vsub[48][i] = v[48].cvsub(i);
           vsub[48][NRev + i] = v[48].ccsub(i);
        }
    
        v[49] = 19.8;

        v[48].sub(NRev, &sub[0], &sub[4]);
        v[50] = v[49] * v[48];

        for (int i = 0; i < NRev; i++)
        {
           vsub[50][i] = v[50].cvsub(i);
           vsub[50][NRev + i] = v[50].ccsub(i);
        }
    
        v[51] = 0.2;
        v[22].sub(NRev, &sub[0], &sub[4]);

        v[52] = v[22] - v[51];

        for (int i = 0; i < NRev; i++)
        {
           vsub[52][i] = v[52].cvsub(i);
           vsub[52][NRev + i] = v[52].ccsub(i);
        }
    
        v[52].sub(NRev, &sub[8], &sub[12]);
        v[0].sub(NRev, &sub[0+k], &sub[0+k]);
        v[53] = v[52] * v[0];

        for (int i = 0; i < NRev; i++)
        {
           vsub[53][i] = v[53].cvsub(i);
           vsub[53][NRev + i] = v[53].ccsub(i);
        }
    
        //-----------------------------------------------------------------------
        // Evaluate subgradients with reverse sweep through computational graph

        for (int i = 0; i < L1; i++)
        {
            //vBar[i] = RevMC(v[i]);
            if (i == L1 - 1)
            {
                double Sub[NRev] = {1,0,0,1};
                vBar[i].subbar(NRev/2, &Sub[0], &Sub[2]);
            }
            else
            {
                vBar[i].subbar(NRev/2);
            }
        }

        vBar[52] = vBar[52] + vBar[53] * tmpv(vsub[53], 2);
        vBar[0] = vBar[0] + vBar[53] * tmpv(vsub[53], 1);
        vBar[22] = vBar[22] + vBar[52] * tmpv(vsub[52], 1);
        vBar[51] = vBar[51] + vBar[52] * tmpv(vsub[52], 2);
        vBar[49] = vBar[49] + vBar[50] * tmpv(vsub[50], 2);
        vBar[48] = vBar[48] + vBar[50] * tmpv(vsub[50], 1);
        vBar[45] = vBar[45] + vBar[48] * tmpv(vsub[48], 1);
        vBar[47] = vBar[47] + vBar[48] * tmpv(vsub[48], 2);
        vBar[46] = vBar[46] + vBar[47] * tmpv(vsub[47], 2);
        vBar[42] = vBar[42] + vBar[47] * tmpv(vsub[47], 1);
        vBar[43] = vBar[43] + vBar[45] * tmpv(vsub[45], 1);
        vBar[44] = vBar[44] + vBar[45] * tmpv(vsub[45], 2);
        vBar[4] = vBar[4] + vBar[43] * tmpv(vsub[43], 2);
        vBar[3] = vBar[3] + vBar[43] * tmpv(vsub[43], 1);
        vBar[37] = vBar[37] + vBar[42] * tmpv(vsub[42], 1);
        vBar[41] = vBar[41] + vBar[42] * tmpv(vsub[42], 2);
        vBar[40] = vBar[40] + vBar[41] * tmpv(vsub[41], 2);
        vBar[1] = vBar[1] + vBar[41] * tmpv(vsub[41], 1);
        vBar[39] = vBar[39] + vBar[40] * tmpv(vsub[40], 2);
        vBar[34] = vBar[34] + vBar[40] * tmpv(vsub[40], 1);
        vBar[10] = vBar[10] + vBar[39] * tmpv(vsub[39], 1);
        vBar[38] = vBar[38] + vBar[39] * tmpv(vsub[39], 2);
        vBar[35] = vBar[35] + vBar[37] * tmpv(vsub[37], 1);
        vBar[36] = vBar[36] + vBar[37] * tmpv(vsub[37], 2);
        vBar[4] = vBar[4] + vBar[35] * tmpv(vsub[35], 2);
        vBar[3] = vBar[3] + vBar[35] * tmpv(vsub[35], 1);
        vBar[33] = vBar[33] + vBar[34] * tmpv(vsub[34], 2);
        vBar[32] = vBar[32] + vBar[34] * tmpv(vsub[34], 1);
        vBar[31] = vBar[31] + vBar[32] * tmpv(vsub[32], 2);
        vBar[30] = vBar[30] + vBar[32] * tmpv(vsub[32], 1);
        vBar[29] = vBar[29] + vBar[30] * tmpv(vsub[30], 2);
        vBar[27] = vBar[27] + vBar[30] * tmpv(vsub[30], 1);
        vBar[28] = vBar[28] + vBar[29] * tmpv(vsub[29], 2);
        vBar[25] = vBar[25] + vBar[29] * tmpv(vsub[29], 1);
        vBar[3] = vBar[3] + vBar[27] * tmpv(vsub[27], 1);
        vBar[26] = vBar[26] + vBar[27] * tmpv(vsub[27], 2);
        vBar[11] = vBar[11] + vBar[25] * tmpv(vsub[25], 1);
        vBar[24] = vBar[24] + vBar[25] * tmpv(vsub[25], 2);
        vBar[23] = vBar[23] + vBar[24] * tmpv(vsub[24], 2);
        vBar[3] = vBar[3] + vBar[24] * tmpv(vsub[24], 1);
        vBar[21] = vBar[21] + vBar[22] * tmpv(vsub[22], 2);
        vBar[20] = vBar[20] + vBar[22] * tmpv(vsub[22], 1);
        vBar[19] = vBar[19] + vBar[20] * tmpv(vsub[20], 2);
        vBar[18] = vBar[18] + vBar[20] * tmpv(vsub[20], 1);
        vBar[17] = vBar[17] + vBar[18] * tmpv(vsub[18], 2);
        vBar[16] = vBar[16] + vBar[18] * tmpv(vsub[18], 1);
        vBar[15] = vBar[15] + vBar[16] * tmpv(vsub[16], 2);
        vBar[14] = vBar[14] + vBar[16] * tmpv(vsub[16], 1);
        vBar[13] = vBar[13] + vBar[14] * tmpv(vsub[14], 2);
        vBar[2] = vBar[2] + vBar[14] * tmpv(vsub[14], 1);
    
        break;

    case 1:
        v[0] = xMC[0];
        v[1] = xMC[1];
        v[2] = xMC[2];
        v[3] = xMC[3];
        v[4] = xMC[4];
        v[5] = pMC[0];
        v[6] = pMC[1];
        v[7] = pMC[2];
        v[8] = pMC[3];
        v[9] = pMC[4];
        v[10] = pMC[5];
        v[11] = pMC[6];
        v[12] = pMC[7];
        v[13] = 1.0;

        v[2].sub(NRev, &sub[0], &sub[4]);
        v[14] = v[13] / v[2];

        for (int i = 0; i < NRev; i++)
        {
           vsub[14][i] = v[14].cvsub(i);
           vsub[14][NRev + i] = v[14].ccsub(i);
        }
    
        v[15] = 7.1;

        v[14].sub(NRev, &sub[0], &sub[4]);
        v[16] = v[15] * v[14];

        for (int i = 0; i < NRev; i++)
        {
           vsub[16][i] = v[16].cvsub(i);
           vsub[16][NRev + i] = v[16].ccsub(i);
        }
    
        v[17] = 1.0;

        v[16].sub(NRev, &sub[0], &sub[4]);
        v[18] = v[17] + v[16];

        for (int i = 0; i < NRev; i++)
        {
           vsub[18][i] = v[18].cvsub(i);
           vsub[18][NRev + i] = v[18].ccsub(i);
        }
    
        v[19] = 1.0;

        v[18].sub(NRev, &sub[0], &sub[4]);
        v[20] = v[19] / v[18];

        for (int i = 0; i < NRev; i++)
        {
           vsub[20][i] = v[20].cvsub(i);
           vsub[20][NRev + i] = v[20].ccsub(i);
        }
    
        v[21] = 1.2;

        v[20].sub(NRev, &sub[0], &sub[4]);
        v[22] = v[21] * v[20];

        for (int i = 0; i < NRev; i++)
        {
           vsub[22][i] = v[22].cvsub(i);
           vsub[22][NRev + i] = v[22].ccsub(i);
        }
    
        v[23] = 1.0;

        v[3].sub(NRev, &sub[0], &sub[4]);
        v[24] = v[23] / v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[24][i] = v[24].cvsub(i);
           vsub[24][NRev + i] = v[24].ccsub(i);
        }
    

        v[24].sub(NRev, &sub[8], &sub[12]);
        v[25] = v[11] * v[24];

        for (int i = 0; i < NRev; i++)
        {
           vsub[25][i] = v[25].cvsub(i);
           vsub[25][NRev + i] = v[25].ccsub(i);
        }
    
        v[26] = 0.00390625;
        v[3].sub(NRev, &sub[0], &sub[4]);

        v[27] = v[3] * v[26];

        for (int i = 0; i < NRev; i++)
        {
           vsub[27][i] = v[27].cvsub(i);
           vsub[27][NRev + i] = v[27].ccsub(i);
        }
    
        v[28] = 1.0;

        v[25].sub(NRev, &sub[0], &sub[4]);
        v[29] = v[28] + v[25];

        for (int i = 0; i < NRev; i++)
        {
           vsub[29][i] = v[29].cvsub(i);
           vsub[29][NRev + i] = v[29].ccsub(i);
        }
    
        v[29].sub(NRev, &sub[8], &sub[12]);
        v[27].sub(NRev, &sub[0], &sub[4]);
        v[30] = v[29] + v[27];

        for (int i = 0; i < NRev; i++)
        {
           vsub[30][i] = v[30].cvsub(i);
           vsub[30][NRev + i] = v[30].ccsub(i);
        }
    
        v[31] = 1.0;

        v[30].sub(NRev, &sub[0], &sub[4]);
        v[32] = v[31] / v[30];

        for (int i = 0; i < NRev; i++)
        {
           vsub[32][i] = v[32].cvsub(i);
           vsub[32][NRev + i] = v[32].ccsub(i);
        }
    
        v[33] = 0.74;

        v[32].sub(NRev, &sub[0], &sub[4]);
        v[34] = v[33] * v[32];

        for (int i = 0; i < NRev; i++)
        {
           vsub[34][i] = v[34].cvsub(i);
           vsub[34][NRev + i] = v[34].ccsub(i);
        }
    
        v[4].sub(NRev, &sub[8], &sub[12]);
        v[3].sub(NRev, &sub[0], &sub[4]);
        v[35] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[35][i] = v[35].cvsub(i);
           vsub[35][NRev + i] = v[35].ccsub(i);
        }
    
        v[36] = 34.0;
        v[35].sub(NRev, &sub[0], &sub[4]);

        v[37] = v[35] - v[36];

        for (int i = 0; i < NRev; i++)
        {
           vsub[37][i] = v[37].cvsub(i);
           vsub[37][NRev + i] = v[37].ccsub(i);
        }
    
        v[38] = 0.050505050505050504;


        v[39] = v[10] * v[38];

        for (int i = 0; i < NRev; i++)
        {
           vsub[39][i] = v[39].cvsub(i);
           vsub[39][NRev + i] = v[39].ccsub(i);
        }
    
        v[39].sub(NRev, &sub[8], &sub[12]);
        v[34].sub(NRev, &sub[0], &sub[4]);
        v[40] = v[39] * v[34];

        for (int i = 0; i < NRev; i++)
        {
           vsub[40][i] = v[40].cvsub(i);
           vsub[40][NRev + i] = v[40].ccsub(i);
        }
    
        v[40].sub(NRev, &sub[8], &sub[12]);
        v[1].sub(NRev, &sub[0+k], &sub[0+k]);
        v[41] = v[40] * v[1];

        for (int i = 0; i < NRev; i++)
        {
           vsub[41][i] = v[41].cvsub(i);
           vsub[41][NRev + i] = v[41].ccsub(i);
        }
    
        v[37].sub(NRev, &sub[0], &sub[4]);
        v[41].sub(NRev, &sub[8], &sub[12]);
        v[42] = v[37] + v[41];

        for (int i = 0; i < NRev; i++)
        {
           vsub[42][i] = v[42].cvsub(i);
           vsub[42][NRev + i] = v[42].ccsub(i);
        }
    
        v[4].sub(NRev, &sub[8], &sub[12]);
        v[3].sub(NRev, &sub[0], &sub[4]);
        v[43] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[43][i] = v[43].cvsub(i);
           vsub[43][NRev + i] = v[43].ccsub(i);
        }
    
        v[44] = 50.0;
        v[43].sub(NRev, &sub[0], &sub[4]);

        v[45] = v[43] - v[44];

        for (int i = 0; i < NRev; i++)
        {
           vsub[45][i] = v[45].cvsub(i);
           vsub[45][NRev + i] = v[45].ccsub(i);
        }
    
        v[46] = 0.5;

        v[42].sub(NRev, &sub[0], &sub[4]);
        v[47] = v[46] * v[42];

        for (int i = 0; i < NRev; i++)
        {
           vsub[47][i] = v[47].cvsub(i);
           vsub[47][NRev + i] = v[47].ccsub(i);
        }
    
        v[45].sub(NRev, &sub[0], &sub[4]);
        v[47].sub(NRev, &sub[8], &sub[12]);
        v[48] = v[45] - v[47];

        for (int i = 0; i < NRev; i++)
        {
           vsub[48][i] = v[48].cvsub(i);
           vsub[48][NRev + i] = v[48].ccsub(i);
        }
    
        v[49] = 19.8;

        v[48].sub(NRev, &sub[0], &sub[4]);
        v[50] = v[49] * v[48];

        for (int i = 0; i < NRev; i++)
        {
           vsub[50][i] = v[50].cvsub(i);
           vsub[50][NRev + i] = v[50].ccsub(i);
        }
    
        v[51] = 0.2;
        v[34].sub(NRev, &sub[0], &sub[4]);

        v[52] = v[34] - v[51];

        for (int i = 0; i < NRev; i++)
        {
           vsub[52][i] = v[52].cvsub(i);
           vsub[52][NRev + i] = v[52].ccsub(i);
        }
    
        v[52].sub(NRev, &sub[8], &sub[12]);
        v[1].sub(NRev, &sub[0+k], &sub[0+k]);
        v[53] = v[52] * v[1];

        for (int i = 0; i < NRev; i++)
        {
           vsub[53][i] = v[53].cvsub(i);
           vsub[53][NRev + i] = v[53].ccsub(i);
        }
    
        //-----------------------------------------------------------------------
        // Evaluate subgradients with reverse sweep through computational graph

        for (int i = 0; i < L2; i++)
        {
            //vBar[i] = RevMC(v[i]);
            if (i == L2 - 1)
            {
                double Sub[NRev] = {1,0,0,1};
                vBar[i].subbar(NRev/2, &Sub[0], &Sub[2]);
            }
            else
            {
                vBar[i].subbar(NRev/2);
            }
        }

        vBar[52] = vBar[52] + vBar[53] * tmpv(vsub[53], 2);
        vBar[1] = vBar[1] + vBar[53] * tmpv(vsub[53], 1);
        vBar[34] = vBar[34] + vBar[52] * tmpv(vsub[52], 1);
        vBar[51] = vBar[51] + vBar[52] * tmpv(vsub[52], 2);
        vBar[49] = vBar[49] + vBar[50] * tmpv(vsub[50], 2);
        vBar[48] = vBar[48] + vBar[50] * tmpv(vsub[50], 1);
        vBar[45] = vBar[45] + vBar[48] * tmpv(vsub[48], 1);
        vBar[47] = vBar[47] + vBar[48] * tmpv(vsub[48], 2);
        vBar[46] = vBar[46] + vBar[47] * tmpv(vsub[47], 2);
        vBar[42] = vBar[42] + vBar[47] * tmpv(vsub[47], 1);
        vBar[43] = vBar[43] + vBar[45] * tmpv(vsub[45], 1);
        vBar[44] = vBar[44] + vBar[45] * tmpv(vsub[45], 2);
        vBar[4] = vBar[4] + vBar[43] * tmpv(vsub[43], 2);
        vBar[3] = vBar[3] + vBar[43] * tmpv(vsub[43], 1);
        vBar[37] = vBar[37] + vBar[42] * tmpv(vsub[42], 1);
        vBar[41] = vBar[41] + vBar[42] * tmpv(vsub[42], 2);
        vBar[40] = vBar[40] + vBar[41] * tmpv(vsub[41], 2);
        vBar[1] = vBar[1] + vBar[41] * tmpv(vsub[41], 1);
        vBar[39] = vBar[39] + vBar[40] * tmpv(vsub[40], 2);
        vBar[34] = vBar[34] + vBar[40] * tmpv(vsub[40], 1);
        vBar[10] = vBar[10] + vBar[39] * tmpv(vsub[39], 1);
        vBar[38] = vBar[38] + vBar[39] * tmpv(vsub[39], 2);
        vBar[35] = vBar[35] + vBar[37] * tmpv(vsub[37], 1);
        vBar[36] = vBar[36] + vBar[37] * tmpv(vsub[37], 2);
        vBar[4] = vBar[4] + vBar[35] * tmpv(vsub[35], 2);
        vBar[3] = vBar[3] + vBar[35] * tmpv(vsub[35], 1);
        vBar[33] = vBar[33] + vBar[34] * tmpv(vsub[34], 2);
        vBar[32] = vBar[32] + vBar[34] * tmpv(vsub[34], 1);
        vBar[31] = vBar[31] + vBar[32] * tmpv(vsub[32], 2);
        vBar[30] = vBar[30] + vBar[32] * tmpv(vsub[32], 1);
        vBar[29] = vBar[29] + vBar[30] * tmpv(vsub[30], 2);
        vBar[27] = vBar[27] + vBar[30] * tmpv(vsub[30], 1);
        vBar[28] = vBar[28] + vBar[29] * tmpv(vsub[29], 2);
        vBar[25] = vBar[25] + vBar[29] * tmpv(vsub[29], 1);
        vBar[3] = vBar[3] + vBar[27] * tmpv(vsub[27], 1);
        vBar[26] = vBar[26] + vBar[27] * tmpv(vsub[27], 2);
        vBar[11] = vBar[11] + vBar[25] * tmpv(vsub[25], 1);
        vBar[24] = vBar[24] + vBar[25] * tmpv(vsub[25], 2);
        vBar[23] = vBar[23] + vBar[24] * tmpv(vsub[24], 2);
        vBar[3] = vBar[3] + vBar[24] * tmpv(vsub[24], 1);
        vBar[21] = vBar[21] + vBar[22] * tmpv(vsub[22], 2);
        vBar[20] = vBar[20] + vBar[22] * tmpv(vsub[22], 1);
        vBar[19] = vBar[19] + vBar[20] * tmpv(vsub[20], 2);
        vBar[18] = vBar[18] + vBar[20] * tmpv(vsub[20], 1);
        vBar[17] = vBar[17] + vBar[18] * tmpv(vsub[18], 2);
        vBar[16] = vBar[16] + vBar[18] * tmpv(vsub[18], 1);
        vBar[15] = vBar[15] + vBar[16] * tmpv(vsub[16], 2);
        vBar[14] = vBar[14] + vBar[16] * tmpv(vsub[16], 1);
        vBar[13] = vBar[13] + vBar[14] * tmpv(vsub[14], 2);
        vBar[2] = vBar[2] + vBar[14] * tmpv(vsub[14], 1);
    
        break;

    case 2:
        v[0] = xMC[0];
        v[1] = xMC[1];
        v[2] = xMC[2];
        v[3] = xMC[3];
        v[4] = xMC[4];
        v[5] = pMC[0];
        v[6] = pMC[1];
        v[7] = pMC[2];
        v[8] = pMC[3];
        v[9] = pMC[4];
        v[10] = pMC[5];
        v[11] = pMC[6];
        v[12] = pMC[7];
        v[13] = 1.0;

        v[2].sub(NRev, &sub[0+k], &sub[0+k]);
        v[14] = v[13] / v[2];

        for (int i = 0; i < NRev; i++)
        {
           vsub[14][i] = v[14].cvsub(i);
           vsub[14][NRev + i] = v[14].ccsub(i);
        }
    
        v[15] = 7.1;

        v[14].sub(NRev, &sub[0], &sub[4]);
        v[16] = v[15] * v[14];

        for (int i = 0; i < NRev; i++)
        {
           vsub[16][i] = v[16].cvsub(i);
           vsub[16][NRev + i] = v[16].ccsub(i);
        }
    
        v[17] = 1.0;

        v[16].sub(NRev, &sub[0], &sub[4]);
        v[18] = v[17] + v[16];

        for (int i = 0; i < NRev; i++)
        {
           vsub[18][i] = v[18].cvsub(i);
           vsub[18][NRev + i] = v[18].ccsub(i);
        }
    
        v[19] = 1.0;

        v[18].sub(NRev, &sub[0], &sub[4]);
        v[20] = v[19] / v[18];

        for (int i = 0; i < NRev; i++)
        {
           vsub[20][i] = v[20].cvsub(i);
           vsub[20][NRev + i] = v[20].ccsub(i);
        }
    
        v[21] = 1.2;

        v[20].sub(NRev, &sub[0], &sub[4]);
        v[22] = v[21] * v[20];

        for (int i = 0; i < NRev; i++)
        {
           vsub[22][i] = v[22].cvsub(i);
           vsub[22][NRev + i] = v[22].ccsub(i);
        }
    
        v[23] = 1.0;

        v[3].sub(NRev, &sub[0], &sub[4]);
        v[24] = v[23] / v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[24][i] = v[24].cvsub(i);
           vsub[24][NRev + i] = v[24].ccsub(i);
        }
    

        v[24].sub(NRev, &sub[8], &sub[12]);
        v[25] = v[11] * v[24];

        for (int i = 0; i < NRev; i++)
        {
           vsub[25][i] = v[25].cvsub(i);
           vsub[25][NRev + i] = v[25].ccsub(i);
        }
    
        v[26] = 0.00390625;
        v[3].sub(NRev, &sub[0], &sub[4]);

        v[27] = v[3] * v[26];

        for (int i = 0; i < NRev; i++)
        {
           vsub[27][i] = v[27].cvsub(i);
           vsub[27][NRev + i] = v[27].ccsub(i);
        }
    
        v[28] = 1.0;

        v[25].sub(NRev, &sub[0], &sub[4]);
        v[29] = v[28] + v[25];

        for (int i = 0; i < NRev; i++)
        {
           vsub[29][i] = v[29].cvsub(i);
           vsub[29][NRev + i] = v[29].ccsub(i);
        }
    
        v[29].sub(NRev, &sub[8], &sub[12]);
        v[27].sub(NRev, &sub[0], &sub[4]);
        v[30] = v[29] + v[27];

        for (int i = 0; i < NRev; i++)
        {
           vsub[30][i] = v[30].cvsub(i);
           vsub[30][NRev + i] = v[30].ccsub(i);
        }
    
        v[31] = 1.0;

        v[30].sub(NRev, &sub[0], &sub[4]);
        v[32] = v[31] / v[30];

        for (int i = 0; i < NRev; i++)
        {
           vsub[32][i] = v[32].cvsub(i);
           vsub[32][NRev + i] = v[32].ccsub(i);
        }
    
        v[33] = 0.74;

        v[32].sub(NRev, &sub[0], &sub[4]);
        v[34] = v[33] * v[32];

        for (int i = 0; i < NRev; i++)
        {
           vsub[34][i] = v[34].cvsub(i);
           vsub[34][NRev + i] = v[34].ccsub(i);
        }
    
        v[4].sub(NRev, &sub[8], &sub[12]);
        v[3].sub(NRev, &sub[0], &sub[4]);
        v[35] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[35][i] = v[35].cvsub(i);
           vsub[35][NRev + i] = v[35].ccsub(i);
        }
    
        v[36] = 34.0;
        v[35].sub(NRev, &sub[0], &sub[4]);

        v[37] = v[35] - v[36];

        for (int i = 0; i < NRev; i++)
        {
           vsub[37][i] = v[37].cvsub(i);
           vsub[37][NRev + i] = v[37].ccsub(i);
        }
    
        v[38] = 0.050505050505050504;


        v[39] = v[10] * v[38];

        for (int i = 0; i < NRev; i++)
        {
           vsub[39][i] = v[39].cvsub(i);
           vsub[39][NRev + i] = v[39].ccsub(i);
        }
    
        v[39].sub(NRev, &sub[8], &sub[12]);
        v[34].sub(NRev, &sub[0], &sub[4]);
        v[40] = v[39] * v[34];

        for (int i = 0; i < NRev; i++)
        {
           vsub[40][i] = v[40].cvsub(i);
           vsub[40][NRev + i] = v[40].ccsub(i);
        }
    
        v[40].sub(NRev, &sub[8], &sub[12]);
        v[1].sub(NRev, &sub[0], &sub[4]);
        v[41] = v[40] * v[1];

        for (int i = 0; i < NRev; i++)
        {
           vsub[41][i] = v[41].cvsub(i);
           vsub[41][NRev + i] = v[41].ccsub(i);
        }
    
        v[37].sub(NRev, &sub[0], &sub[4]);
        v[41].sub(NRev, &sub[8], &sub[12]);
        v[42] = v[37] + v[41];

        for (int i = 0; i < NRev; i++)
        {
           vsub[42][i] = v[42].cvsub(i);
           vsub[42][NRev + i] = v[42].ccsub(i);
        }
    
        v[4].sub(NRev, &sub[8], &sub[12]);
        v[3].sub(NRev, &sub[0], &sub[4]);
        v[43] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[43][i] = v[43].cvsub(i);
           vsub[43][NRev + i] = v[43].ccsub(i);
        }
    
        v[44] = 50.0;
        v[43].sub(NRev, &sub[0], &sub[4]);

        v[45] = v[43] - v[44];

        for (int i = 0; i < NRev; i++)
        {
           vsub[45][i] = v[45].cvsub(i);
           vsub[45][NRev + i] = v[45].ccsub(i);
        }
    
        v[46] = 0.5;

        v[42].sub(NRev, &sub[0], &sub[4]);
        v[47] = v[46] * v[42];

        for (int i = 0; i < NRev; i++)
        {
           vsub[47][i] = v[47].cvsub(i);
           vsub[47][NRev + i] = v[47].ccsub(i);
        }
    
        v[45].sub(NRev, &sub[0], &sub[4]);
        v[47].sub(NRev, &sub[8], &sub[12]);
        v[48] = v[45] - v[47];

        for (int i = 0; i < NRev; i++)
        {
           vsub[48][i] = v[48].cvsub(i);
           vsub[48][NRev + i] = v[48].ccsub(i);
        }
    
        v[49] = 19.8;

        v[48].sub(NRev, &sub[0], &sub[4]);
        v[50] = v[49] * v[48];

        for (int i = 0; i < NRev; i++)
        {
           vsub[50][i] = v[50].cvsub(i);
           vsub[50][NRev + i] = v[50].ccsub(i);
        }
    
        v[51] = 5.0;

        v[2].sub(NRev, &sub[0+k], &sub[0+k]);
        v[52] = v[51] - v[2];

        for (int i = 0; i < NRev; i++)
        {
           vsub[52][i] = v[52].cvsub(i);
           vsub[52][NRev + i] = v[52].ccsub(i);
        }
    
        v[53] = 0.4;

        v[52].sub(NRev, &sub[0], &sub[4]);
        v[54] = v[53] * v[52];

        for (int i = 0; i < NRev; i++)
        {
           vsub[54][i] = v[54].cvsub(i);
           vsub[54][NRev + i] = v[54].ccsub(i);
        }
    

        v[22].sub(NRev, &sub[8], &sub[12]);
        v[55] = v[5] * v[22];

        for (int i = 0; i < NRev; i++)
        {
           vsub[55][i] = v[55].cvsub(i);
           vsub[55][NRev + i] = v[55].ccsub(i);
        }
    
        v[55].sub(NRev, &sub[8], &sub[12]);
        v[0].sub(NRev, &sub[0], &sub[4]);
        v[56] = v[55] * v[0];

        for (int i = 0; i < NRev; i++)
        {
           vsub[56][i] = v[56].cvsub(i);
           vsub[56][NRev + i] = v[56].ccsub(i);
        }
    
        v[54].sub(NRev, &sub[0], &sub[4]);
        v[56].sub(NRev, &sub[8], &sub[12]);
        v[57] = v[54] - v[56];

        for (int i = 0; i < NRev; i++)
        {
           vsub[57][i] = v[57].cvsub(i);
           vsub[57][NRev + i] = v[57].ccsub(i);
        }
    
        //-----------------------------------------------------------------------
        // Evaluate subgradients with reverse sweep through computational graph

        for (int i = 0; i < L3; i++)
        {
            //vBar[i] = RevMC(v[i]);
            if (i == L3 - 1)
            {
                double Sub[NRev] = {1,0,0,1};
                vBar[i].subbar(NRev/2, &Sub[0], &Sub[2]);
            }
            else
            {
                vBar[i].subbar(NRev/2);
            }
        }

        vBar[54] = vBar[54] + vBar[57] * tmpv(vsub[57], 1);
        vBar[56] = vBar[56] + vBar[57] * tmpv(vsub[57], 2);
        vBar[55] = vBar[55] + vBar[56] * tmpv(vsub[56], 2);
        vBar[0] = vBar[0] + vBar[56] * tmpv(vsub[56], 1);
        vBar[5] = vBar[5] + vBar[55] * tmpv(vsub[55], 1);
        vBar[22] = vBar[22] + vBar[55] * tmpv(vsub[55], 2);
        vBar[53] = vBar[53] + vBar[54] * tmpv(vsub[54], 2);
        vBar[52] = vBar[52] + vBar[54] * tmpv(vsub[54], 1);
        vBar[51] = vBar[51] + vBar[52] * tmpv(vsub[52], 2);
        vBar[2] = vBar[2] + vBar[52] * tmpv(vsub[52], 1);
        vBar[49] = vBar[49] + vBar[50] * tmpv(vsub[50], 2);
        vBar[48] = vBar[48] + vBar[50] * tmpv(vsub[50], 1);
        vBar[45] = vBar[45] + vBar[48] * tmpv(vsub[48], 1);
        vBar[47] = vBar[47] + vBar[48] * tmpv(vsub[48], 2);
        vBar[46] = vBar[46] + vBar[47] * tmpv(vsub[47], 2);
        vBar[42] = vBar[42] + vBar[47] * tmpv(vsub[47], 1);
        vBar[43] = vBar[43] + vBar[45] * tmpv(vsub[45], 1);
        vBar[44] = vBar[44] + vBar[45] * tmpv(vsub[45], 2);
        vBar[4] = vBar[4] + vBar[43] * tmpv(vsub[43], 2);
        vBar[3] = vBar[3] + vBar[43] * tmpv(vsub[43], 1);
        vBar[37] = vBar[37] + vBar[42] * tmpv(vsub[42], 1);
        vBar[41] = vBar[41] + vBar[42] * tmpv(vsub[42], 2);
        vBar[40] = vBar[40] + vBar[41] * tmpv(vsub[41], 2);
        vBar[1] = vBar[1] + vBar[41] * tmpv(vsub[41], 1);
        vBar[39] = vBar[39] + vBar[40] * tmpv(vsub[40], 2);
        vBar[34] = vBar[34] + vBar[40] * tmpv(vsub[40], 1);
        vBar[10] = vBar[10] + vBar[39] * tmpv(vsub[39], 1);
        vBar[38] = vBar[38] + vBar[39] * tmpv(vsub[39], 2);
        vBar[35] = vBar[35] + vBar[37] * tmpv(vsub[37], 1);
        vBar[36] = vBar[36] + vBar[37] * tmpv(vsub[37], 2);
        vBar[4] = vBar[4] + vBar[35] * tmpv(vsub[35], 2);
        vBar[3] = vBar[3] + vBar[35] * tmpv(vsub[35], 1);
        vBar[33] = vBar[33] + vBar[34] * tmpv(vsub[34], 2);
        vBar[32] = vBar[32] + vBar[34] * tmpv(vsub[34], 1);
        vBar[31] = vBar[31] + vBar[32] * tmpv(vsub[32], 2);
        vBar[30] = vBar[30] + vBar[32] * tmpv(vsub[32], 1);
        vBar[29] = vBar[29] + vBar[30] * tmpv(vsub[30], 2);
        vBar[27] = vBar[27] + vBar[30] * tmpv(vsub[30], 1);
        vBar[28] = vBar[28] + vBar[29] * tmpv(vsub[29], 2);
        vBar[25] = vBar[25] + vBar[29] * tmpv(vsub[29], 1);
        vBar[3] = vBar[3] + vBar[27] * tmpv(vsub[27], 1);
        vBar[26] = vBar[26] + vBar[27] * tmpv(vsub[27], 2);
        vBar[11] = vBar[11] + vBar[25] * tmpv(vsub[25], 1);
        vBar[24] = vBar[24] + vBar[25] * tmpv(vsub[25], 2);
        vBar[23] = vBar[23] + vBar[24] * tmpv(vsub[24], 2);
        vBar[3] = vBar[3] + vBar[24] * tmpv(vsub[24], 1);
        vBar[21] = vBar[21] + vBar[22] * tmpv(vsub[22], 2);
        vBar[20] = vBar[20] + vBar[22] * tmpv(vsub[22], 1);
        vBar[19] = vBar[19] + vBar[20] * tmpv(vsub[20], 2);
        vBar[18] = vBar[18] + vBar[20] * tmpv(vsub[20], 1);
        vBar[17] = vBar[17] + vBar[18] * tmpv(vsub[18], 2);
        vBar[16] = vBar[16] + vBar[18] * tmpv(vsub[18], 1);
        vBar[15] = vBar[15] + vBar[16] * tmpv(vsub[16], 2);
        vBar[14] = vBar[14] + vBar[16] * tmpv(vsub[16], 1);
        vBar[13] = vBar[13] + vBar[14] * tmpv(vsub[14], 2);
        vBar[2] = vBar[2] + vBar[14] * tmpv(vsub[14], 1);
    
        break;

    case 3:
        v[0] = xMC[0];
        v[1] = xMC[1];
        v[2] = xMC[2];
        v[3] = xMC[3];
        v[4] = xMC[4];
        v[5] = pMC[0];
        v[6] = pMC[1];
        v[7] = pMC[2];
        v[8] = pMC[3];
        v[9] = pMC[4];
        v[10] = pMC[5];
        v[11] = pMC[6];
        v[12] = pMC[7];
        v[13] = 1.0;

        v[2].sub(NRev, &sub[0], &sub[4]);
        v[14] = v[13] / v[2];

        for (int i = 0; i < NRev; i++)
        {
           vsub[14][i] = v[14].cvsub(i);
           vsub[14][NRev + i] = v[14].ccsub(i);
        }
    
        v[15] = 7.1;

        v[14].sub(NRev, &sub[0], &sub[4]);
        v[16] = v[15] * v[14];

        for (int i = 0; i < NRev; i++)
        {
           vsub[16][i] = v[16].cvsub(i);
           vsub[16][NRev + i] = v[16].ccsub(i);
        }
    
        v[17] = 1.0;

        v[16].sub(NRev, &sub[0], &sub[4]);
        v[18] = v[17] + v[16];

        for (int i = 0; i < NRev; i++)
        {
           vsub[18][i] = v[18].cvsub(i);
           vsub[18][NRev + i] = v[18].ccsub(i);
        }
    
        v[19] = 1.0;

        v[18].sub(NRev, &sub[0], &sub[4]);
        v[20] = v[19] / v[18];

        for (int i = 0; i < NRev; i++)
        {
           vsub[20][i] = v[20].cvsub(i);
           vsub[20][NRev + i] = v[20].ccsub(i);
        }
    
        v[21] = 1.2;

        v[20].sub(NRev, &sub[0], &sub[4]);
        v[22] = v[21] * v[20];

        for (int i = 0; i < NRev; i++)
        {
           vsub[22][i] = v[22].cvsub(i);
           vsub[22][NRev + i] = v[22].ccsub(i);
        }
    
        v[23] = 1.0;

        v[3].sub(NRev, &sub[0+k], &sub[0+k]);
        v[24] = v[23] / v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[24][i] = v[24].cvsub(i);
           vsub[24][NRev + i] = v[24].ccsub(i);
        }
    

        v[24].sub(NRev, &sub[8], &sub[12]);
        v[25] = v[11] * v[24];

        for (int i = 0; i < NRev; i++)
        {
           vsub[25][i] = v[25].cvsub(i);
           vsub[25][NRev + i] = v[25].ccsub(i);
        }
    
        v[26] = 0.00390625;
        v[3].sub(NRev, &sub[0+k], &sub[0+k]);

        v[27] = v[3] * v[26];

        for (int i = 0; i < NRev; i++)
        {
           vsub[27][i] = v[27].cvsub(i);
           vsub[27][NRev + i] = v[27].ccsub(i);
        }
    
        v[28] = 1.0;

        v[25].sub(NRev, &sub[0], &sub[4]);
        v[29] = v[28] + v[25];

        for (int i = 0; i < NRev; i++)
        {
           vsub[29][i] = v[29].cvsub(i);
           vsub[29][NRev + i] = v[29].ccsub(i);
        }
    
        v[29].sub(NRev, &sub[8], &sub[12]);
        v[27].sub(NRev, &sub[0], &sub[4]);
        v[30] = v[29] + v[27];

        for (int i = 0; i < NRev; i++)
        {
           vsub[30][i] = v[30].cvsub(i);
           vsub[30][NRev + i] = v[30].ccsub(i);
        }
    
        v[31] = 1.0;

        v[30].sub(NRev, &sub[0], &sub[4]);
        v[32] = v[31] / v[30];

        for (int i = 0; i < NRev; i++)
        {
           vsub[32][i] = v[32].cvsub(i);
           vsub[32][NRev + i] = v[32].ccsub(i);
        }
    
        v[33] = 0.74;

        v[32].sub(NRev, &sub[0], &sub[4]);
        v[34] = v[33] * v[32];

        for (int i = 0; i < NRev; i++)
        {
           vsub[34][i] = v[34].cvsub(i);
           vsub[34][NRev + i] = v[34].ccsub(i);
        }
    
        v[4].sub(NRev, &sub[8], &sub[12]);
        v[3].sub(NRev, &sub[0+k], &sub[0+k]);
        v[35] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[35][i] = v[35].cvsub(i);
           vsub[35][NRev + i] = v[35].ccsub(i);
        }
    
        v[36] = 34.0;
        v[35].sub(NRev, &sub[0], &sub[4]);

        v[37] = v[35] - v[36];

        for (int i = 0; i < NRev; i++)
        {
           vsub[37][i] = v[37].cvsub(i);
           vsub[37][NRev + i] = v[37].ccsub(i);
        }
    
        v[38] = 0.050505050505050504;


        v[39] = v[10] * v[38];

        for (int i = 0; i < NRev; i++)
        {
           vsub[39][i] = v[39].cvsub(i);
           vsub[39][NRev + i] = v[39].ccsub(i);
        }
    
        v[39].sub(NRev, &sub[8], &sub[12]);
        v[34].sub(NRev, &sub[0], &sub[4]);
        v[40] = v[39] * v[34];

        for (int i = 0; i < NRev; i++)
        {
           vsub[40][i] = v[40].cvsub(i);
           vsub[40][NRev + i] = v[40].ccsub(i);
        }
    
        v[40].sub(NRev, &sub[8], &sub[12]);
        v[1].sub(NRev, &sub[0], &sub[4]);
        v[41] = v[40] * v[1];

        for (int i = 0; i < NRev; i++)
        {
           vsub[41][i] = v[41].cvsub(i);
           vsub[41][NRev + i] = v[41].ccsub(i);
        }
    
        v[37].sub(NRev, &sub[0], &sub[4]);
        v[41].sub(NRev, &sub[8], &sub[12]);
        v[42] = v[37] + v[41];

        for (int i = 0; i < NRev; i++)
        {
           vsub[42][i] = v[42].cvsub(i);
           vsub[42][NRev + i] = v[42].ccsub(i);
        }
    
        v[4].sub(NRev, &sub[8], &sub[12]);
        v[3].sub(NRev, &sub[0+k], &sub[0+k]);
        v[43] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[43][i] = v[43].cvsub(i);
           vsub[43][NRev + i] = v[43].ccsub(i);
        }
    
        v[44] = 50.0;
        v[43].sub(NRev, &sub[0], &sub[4]);

        v[45] = v[43] - v[44];

        for (int i = 0; i < NRev; i++)
        {
           vsub[45][i] = v[45].cvsub(i);
           vsub[45][NRev + i] = v[45].ccsub(i);
        }
    
        v[46] = 0.5;

        v[42].sub(NRev, &sub[0], &sub[4]);
        v[47] = v[46] * v[42];

        for (int i = 0; i < NRev; i++)
        {
           vsub[47][i] = v[47].cvsub(i);
           vsub[47][NRev + i] = v[47].ccsub(i);
        }
    
        v[45].sub(NRev, &sub[0], &sub[4]);
        v[47].sub(NRev, &sub[8], &sub[12]);
        v[48] = v[45] - v[47];

        for (int i = 0; i < NRev; i++)
        {
           vsub[48][i] = v[48].cvsub(i);
           vsub[48][NRev + i] = v[48].ccsub(i);
        }
    
        v[49] = 19.8;

        v[48].sub(NRev, &sub[0], &sub[4]);
        v[50] = v[49] * v[48];

        for (int i = 0; i < NRev; i++)
        {
           vsub[50][i] = v[50].cvsub(i);
           vsub[50][NRev + i] = v[50].ccsub(i);
        }
    
        v[51] = 80.0;

        v[3].sub(NRev, &sub[0+k], &sub[0+k]);
        v[52] = v[51] - v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[52][i] = v[52].cvsub(i);
           vsub[52][NRev + i] = v[52].ccsub(i);
        }
    
        v[53] = 0.4;

        v[52].sub(NRev, &sub[0], &sub[4]);
        v[54] = v[53] * v[52];

        for (int i = 0; i < NRev; i++)
        {
           vsub[54][i] = v[54].cvsub(i);
           vsub[54][NRev + i] = v[54].ccsub(i);
        }
    

        v[22].sub(NRev, &sub[8], &sub[12]);
        v[55] = v[6] * v[22];

        for (int i = 0; i < NRev; i++)
        {
           vsub[55][i] = v[55].cvsub(i);
           vsub[55][NRev + i] = v[55].ccsub(i);
        }
    
        v[55].sub(NRev, &sub[8], &sub[12]);
        v[0].sub(NRev, &sub[0], &sub[4]);
        v[56] = v[55] * v[0];

        for (int i = 0; i < NRev; i++)
        {
           vsub[56][i] = v[56].cvsub(i);
           vsub[56][NRev + i] = v[56].ccsub(i);
        }
    
        v[54].sub(NRev, &sub[0], &sub[4]);
        v[56].sub(NRev, &sub[8], &sub[12]);
        v[57] = v[54] + v[56];

        for (int i = 0; i < NRev; i++)
        {
           vsub[57][i] = v[57].cvsub(i);
           vsub[57][NRev + i] = v[57].ccsub(i);
        }
    

        v[34].sub(NRev, &sub[8], &sub[12]);
        v[58] = v[7] * v[34];

        for (int i = 0; i < NRev; i++)
        {
           vsub[58][i] = v[58].cvsub(i);
           vsub[58][NRev + i] = v[58].ccsub(i);
        }
    
        v[58].sub(NRev, &sub[8], &sub[12]);
        v[1].sub(NRev, &sub[0], &sub[4]);
        v[59] = v[58] * v[1];

        for (int i = 0; i < NRev; i++)
        {
           vsub[59][i] = v[59].cvsub(i);
           vsub[59][NRev + i] = v[59].ccsub(i);
        }
    
        v[57].sub(NRev, &sub[0], &sub[4]);
        v[59].sub(NRev, &sub[8], &sub[12]);
        v[60] = v[57] - v[59];

        for (int i = 0; i < NRev; i++)
        {
           vsub[60][i] = v[60].cvsub(i);
           vsub[60][NRev + i] = v[60].ccsub(i);
        }
    
        //-----------------------------------------------------------------------
        // Evaluate subgradients with reverse sweep through computational graph

        for (int i = 0; i < L4; i++)
        {
            //vBar[i] = RevMC(v[i]);
            if (i == L4 - 1)
            {
                double Sub[NRev] = {1,0,0,1};
                vBar[i].subbar(NRev/2, &Sub[0], &Sub[2]);
            }
            else
            {
                vBar[i].subbar(NRev/2);
            }
        }

        vBar[57] = vBar[57] + vBar[60] * tmpv(vsub[60], 1);
        vBar[59] = vBar[59] + vBar[60] * tmpv(vsub[60], 2);
        vBar[58] = vBar[58] + vBar[59] * tmpv(vsub[59], 2);
        vBar[1] = vBar[1] + vBar[59] * tmpv(vsub[59], 1);
        vBar[7] = vBar[7] + vBar[58] * tmpv(vsub[58], 1);
        vBar[34] = vBar[34] + vBar[58] * tmpv(vsub[58], 2);
        vBar[54] = vBar[54] + vBar[57] * tmpv(vsub[57], 1);
        vBar[56] = vBar[56] + vBar[57] * tmpv(vsub[57], 2);
        vBar[55] = vBar[55] + vBar[56] * tmpv(vsub[56], 2);
        vBar[0] = vBar[0] + vBar[56] * tmpv(vsub[56], 1);
        vBar[6] = vBar[6] + vBar[55] * tmpv(vsub[55], 1);
        vBar[22] = vBar[22] + vBar[55] * tmpv(vsub[55], 2);
        vBar[53] = vBar[53] + vBar[54] * tmpv(vsub[54], 2);
        vBar[52] = vBar[52] + vBar[54] * tmpv(vsub[54], 1);
        vBar[51] = vBar[51] + vBar[52] * tmpv(vsub[52], 2);
        vBar[3] = vBar[3] + vBar[52] * tmpv(vsub[52], 1);
        vBar[49] = vBar[49] + vBar[50] * tmpv(vsub[50], 2);
        vBar[48] = vBar[48] + vBar[50] * tmpv(vsub[50], 1);
        vBar[45] = vBar[45] + vBar[48] * tmpv(vsub[48], 1);
        vBar[47] = vBar[47] + vBar[48] * tmpv(vsub[48], 2);
        vBar[46] = vBar[46] + vBar[47] * tmpv(vsub[47], 2);
        vBar[42] = vBar[42] + vBar[47] * tmpv(vsub[47], 1);
        vBar[43] = vBar[43] + vBar[45] * tmpv(vsub[45], 1);
        vBar[44] = vBar[44] + vBar[45] * tmpv(vsub[45], 2);
        vBar[4] = vBar[4] + vBar[43] * tmpv(vsub[43], 2);
        vBar[3] = vBar[3] + vBar[43] * tmpv(vsub[43], 1);
        vBar[37] = vBar[37] + vBar[42] * tmpv(vsub[42], 1);
        vBar[41] = vBar[41] + vBar[42] * tmpv(vsub[42], 2);
        vBar[40] = vBar[40] + vBar[41] * tmpv(vsub[41], 2);
        vBar[1] = vBar[1] + vBar[41] * tmpv(vsub[41], 1);
        vBar[39] = vBar[39] + vBar[40] * tmpv(vsub[40], 2);
        vBar[34] = vBar[34] + vBar[40] * tmpv(vsub[40], 1);
        vBar[10] = vBar[10] + vBar[39] * tmpv(vsub[39], 1);
        vBar[38] = vBar[38] + vBar[39] * tmpv(vsub[39], 2);
        vBar[35] = vBar[35] + vBar[37] * tmpv(vsub[37], 1);
        vBar[36] = vBar[36] + vBar[37] * tmpv(vsub[37], 2);
        vBar[4] = vBar[4] + vBar[35] * tmpv(vsub[35], 2);
        vBar[3] = vBar[3] + vBar[35] * tmpv(vsub[35], 1);
        vBar[33] = vBar[33] + vBar[34] * tmpv(vsub[34], 2);
        vBar[32] = vBar[32] + vBar[34] * tmpv(vsub[34], 1);
        vBar[31] = vBar[31] + vBar[32] * tmpv(vsub[32], 2);
        vBar[30] = vBar[30] + vBar[32] * tmpv(vsub[32], 1);
        vBar[29] = vBar[29] + vBar[30] * tmpv(vsub[30], 2);
        vBar[27] = vBar[27] + vBar[30] * tmpv(vsub[30], 1);
        vBar[28] = vBar[28] + vBar[29] * tmpv(vsub[29], 2);
        vBar[25] = vBar[25] + vBar[29] * tmpv(vsub[29], 1);
        vBar[3] = vBar[3] + vBar[27] * tmpv(vsub[27], 1);
        vBar[26] = vBar[26] + vBar[27] * tmpv(vsub[27], 2);
        vBar[11] = vBar[11] + vBar[25] * tmpv(vsub[25], 1);
        vBar[24] = vBar[24] + vBar[25] * tmpv(vsub[25], 2);
        vBar[23] = vBar[23] + vBar[24] * tmpv(vsub[24], 2);
        vBar[3] = vBar[3] + vBar[24] * tmpv(vsub[24], 1);
        vBar[21] = vBar[21] + vBar[22] * tmpv(vsub[22], 2);
        vBar[20] = vBar[20] + vBar[22] * tmpv(vsub[22], 1);
        vBar[19] = vBar[19] + vBar[20] * tmpv(vsub[20], 2);
        vBar[18] = vBar[18] + vBar[20] * tmpv(vsub[20], 1);
        vBar[17] = vBar[17] + vBar[18] * tmpv(vsub[18], 2);
        vBar[16] = vBar[16] + vBar[18] * tmpv(vsub[18], 1);
        vBar[15] = vBar[15] + vBar[16] * tmpv(vsub[16], 2);
        vBar[14] = vBar[14] + vBar[16] * tmpv(vsub[16], 1);
        vBar[13] = vBar[13] + vBar[14] * tmpv(vsub[14], 2);
        vBar[2] = vBar[2] + vBar[14] * tmpv(vsub[14], 1);
    
        break;

    case 4:
        v[0] = xMC[0];
        v[1] = xMC[1];
        v[2] = xMC[2];
        v[3] = xMC[3];
        v[4] = xMC[4];
        v[5] = pMC[0];
        v[6] = pMC[1];
        v[7] = pMC[2];
        v[8] = pMC[3];
        v[9] = pMC[4];
        v[10] = pMC[5];
        v[11] = pMC[6];
        v[12] = pMC[7];
        v[13] = 1.0;

        v[2].sub(NRev, &sub[0], &sub[4]);
        v[14] = v[13] / v[2];

        for (int i = 0; i < NRev; i++)
        {
           vsub[14][i] = v[14].cvsub(i);
           vsub[14][NRev + i] = v[14].ccsub(i);
        }
    
        v[15] = 7.1;

        v[14].sub(NRev, &sub[0], &sub[4]);
        v[16] = v[15] * v[14];

        for (int i = 0; i < NRev; i++)
        {
           vsub[16][i] = v[16].cvsub(i);
           vsub[16][NRev + i] = v[16].ccsub(i);
        }
    
        v[17] = 1.0;

        v[16].sub(NRev, &sub[0], &sub[4]);
        v[18] = v[17] + v[16];

        for (int i = 0; i < NRev; i++)
        {
           vsub[18][i] = v[18].cvsub(i);
           vsub[18][NRev + i] = v[18].ccsub(i);
        }
    
        v[19] = 1.0;

        v[18].sub(NRev, &sub[0], &sub[4]);
        v[20] = v[19] / v[18];

        for (int i = 0; i < NRev; i++)
        {
           vsub[20][i] = v[20].cvsub(i);
           vsub[20][NRev + i] = v[20].ccsub(i);
        }
    
        v[21] = 1.2;

        v[20].sub(NRev, &sub[0], &sub[4]);
        v[22] = v[21] * v[20];

        for (int i = 0; i < NRev; i++)
        {
           vsub[22][i] = v[22].cvsub(i);
           vsub[22][NRev + i] = v[22].ccsub(i);
        }
    
        v[23] = 1.0;

        v[3].sub(NRev, &sub[0], &sub[4]);
        v[24] = v[23] / v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[24][i] = v[24].cvsub(i);
           vsub[24][NRev + i] = v[24].ccsub(i);
        }
    

        v[24].sub(NRev, &sub[8], &sub[12]);
        v[25] = v[11] * v[24];

        for (int i = 0; i < NRev; i++)
        {
           vsub[25][i] = v[25].cvsub(i);
           vsub[25][NRev + i] = v[25].ccsub(i);
        }
    
        v[26] = 0.00390625;
        v[3].sub(NRev, &sub[0], &sub[4]);

        v[27] = v[3] * v[26];

        for (int i = 0; i < NRev; i++)
        {
           vsub[27][i] = v[27].cvsub(i);
           vsub[27][NRev + i] = v[27].ccsub(i);
        }
    
        v[28] = 1.0;

        v[25].sub(NRev, &sub[0], &sub[4]);
        v[29] = v[28] + v[25];

        for (int i = 0; i < NRev; i++)
        {
           vsub[29][i] = v[29].cvsub(i);
           vsub[29][NRev + i] = v[29].ccsub(i);
        }
    
        v[29].sub(NRev, &sub[8], &sub[12]);
        v[27].sub(NRev, &sub[0], &sub[4]);
        v[30] = v[29] + v[27];

        for (int i = 0; i < NRev; i++)
        {
           vsub[30][i] = v[30].cvsub(i);
           vsub[30][NRev + i] = v[30].ccsub(i);
        }
    
        v[31] = 1.0;

        v[30].sub(NRev, &sub[0], &sub[4]);
        v[32] = v[31] / v[30];

        for (int i = 0; i < NRev; i++)
        {
           vsub[32][i] = v[32].cvsub(i);
           vsub[32][NRev + i] = v[32].ccsub(i);
        }
    
        v[33] = 0.74;

        v[32].sub(NRev, &sub[0], &sub[4]);
        v[34] = v[33] * v[32];

        for (int i = 0; i < NRev; i++)
        {
           vsub[34][i] = v[34].cvsub(i);
           vsub[34][NRev + i] = v[34].ccsub(i);
        }
    
        v[4].sub(NRev, &sub[8+k], &sub[8+k]);
        v[3].sub(NRev, &sub[0], &sub[4]);
        v[35] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[35][i] = v[35].cvsub(i);
           vsub[35][NRev + i] = v[35].ccsub(i);
        }
    
        v[36] = 34.0;
        v[35].sub(NRev, &sub[0], &sub[4]);

        v[37] = v[35] - v[36];

        for (int i = 0; i < NRev; i++)
        {
           vsub[37][i] = v[37].cvsub(i);
           vsub[37][NRev + i] = v[37].ccsub(i);
        }
    
        v[38] = 0.050505050505050504;


        v[39] = v[10] * v[38];

        for (int i = 0; i < NRev; i++)
        {
           vsub[39][i] = v[39].cvsub(i);
           vsub[39][NRev + i] = v[39].ccsub(i);
        }
    
        v[39].sub(NRev, &sub[8], &sub[12]);
        v[34].sub(NRev, &sub[0], &sub[4]);
        v[40] = v[39] * v[34];

        for (int i = 0; i < NRev; i++)
        {
           vsub[40][i] = v[40].cvsub(i);
           vsub[40][NRev + i] = v[40].ccsub(i);
        }
    
        v[40].sub(NRev, &sub[8], &sub[12]);
        v[1].sub(NRev, &sub[0], &sub[4]);
        v[41] = v[40] * v[1];

        for (int i = 0; i < NRev; i++)
        {
           vsub[41][i] = v[41].cvsub(i);
           vsub[41][NRev + i] = v[41].ccsub(i);
        }
    
        v[37].sub(NRev, &sub[0], &sub[4]);
        v[41].sub(NRev, &sub[8], &sub[12]);
        v[42] = v[37] + v[41];

        for (int i = 0; i < NRev; i++)
        {
           vsub[42][i] = v[42].cvsub(i);
           vsub[42][NRev + i] = v[42].ccsub(i);
        }
    
        v[4].sub(NRev, &sub[8+k], &sub[8+k]);
        v[3].sub(NRev, &sub[0], &sub[4]);
        v[43] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
           vsub[43][i] = v[43].cvsub(i);
           vsub[43][NRev + i] = v[43].ccsub(i);
        }
    
        v[44] = 50.0;
        v[43].sub(NRev, &sub[0], &sub[4]);

        v[45] = v[43] - v[44];

        for (int i = 0; i < NRev; i++)
        {
           vsub[45][i] = v[45].cvsub(i);
           vsub[45][NRev + i] = v[45].ccsub(i);
        }
    
        v[46] = 0.5;

        v[42].sub(NRev, &sub[0], &sub[4]);
        v[47] = v[46] * v[42];

        for (int i = 0; i < NRev; i++)
        {
           vsub[47][i] = v[47].cvsub(i);
           vsub[47][NRev + i] = v[47].ccsub(i);
        }
    
        v[45].sub(NRev, &sub[0], &sub[4]);
        v[47].sub(NRev, &sub[8], &sub[12]);
        v[48] = v[45] - v[47];

        for (int i = 0; i < NRev; i++)
        {
           vsub[48][i] = v[48].cvsub(i);
           vsub[48][NRev + i] = v[48].ccsub(i);
        }
    
        v[49] = 19.8;

        v[48].sub(NRev, &sub[0], &sub[4]);
        v[50] = v[49] * v[48];

        for (int i = 0; i < NRev; i++)
        {
           vsub[50][i] = v[50].cvsub(i);
           vsub[50][NRev + i] = v[50].ccsub(i);
        }
    
        v[51] = -0.4;

        v[4].sub(NRev, &sub[0+k], &sub[0+k]);
        v[52] = v[51] * v[4];

        for (int i = 0; i < NRev; i++)
        {
           vsub[52][i] = v[52].cvsub(i);
           vsub[52][NRev + i] = v[52].ccsub(i);
        }
    
        v[52].sub(NRev, &sub[8], &sub[12]);
        v[50].sub(NRev, &sub[0], &sub[4]);
        v[53] = v[52] - v[50];

        for (int i = 0; i < NRev; i++)
        {
           vsub[53][i] = v[53].cvsub(i);
           vsub[53][NRev + i] = v[53].ccsub(i);
        }
    

        v[22].sub(NRev, &sub[8], &sub[12]);
        v[54] = v[8] * v[22];

        for (int i = 0; i < NRev; i++)
        {
           vsub[54][i] = v[54].cvsub(i);
           vsub[54][NRev + i] = v[54].ccsub(i);
        }
    
        v[54].sub(NRev, &sub[8], &sub[12]);
        v[0].sub(NRev, &sub[0], &sub[4]);
        v[55] = v[54] * v[0];

        for (int i = 0; i < NRev; i++)
        {
           vsub[55][i] = v[55].cvsub(i);
           vsub[55][NRev + i] = v[55].ccsub(i);
        }
    

        v[34].sub(NRev, &sub[8], &sub[12]);
        v[56] = v[9] * v[34];

        for (int i = 0; i < NRev; i++)
        {
           vsub[56][i] = v[56].cvsub(i);
           vsub[56][NRev + i] = v[56].ccsub(i);
        }
    
        v[56].sub(NRev, &sub[8], &sub[12]);
        v[1].sub(NRev, &sub[0], &sub[4]);
        v[57] = v[56] * v[1];

        for (int i = 0; i < NRev; i++)
        {
           vsub[57][i] = v[57].cvsub(i);
           vsub[57][NRev + i] = v[57].ccsub(i);
        }
    
        v[53].sub(NRev, &sub[0], &sub[4]);
        v[55].sub(NRev, &sub[8], &sub[12]);
        v[58] = v[53] + v[55];

        for (int i = 0; i < NRev; i++)
        {
           vsub[58][i] = v[58].cvsub(i);
           vsub[58][NRev + i] = v[58].ccsub(i);
        }
    
        v[58].sub(NRev, &sub[8], &sub[12]);
        v[57].sub(NRev, &sub[0], &sub[4]);
        v[59] = v[58] + v[57];

        for (int i = 0; i < NRev; i++)
        {
           vsub[59][i] = v[59].cvsub(i);
           vsub[59][NRev + i] = v[59].ccsub(i);
        }
    
        //-----------------------------------------------------------------------
        // Evaluate subgradients with reverse sweep through computational graph

        for (int i = 0; i < L5; i++)
        {
            //vBar[i] = RevMC(v[i]);
            if (i == L5 - 1)
            {
                double Sub[NRev] = {1,0,0,1};
                vBar[i].subbar(NRev/2, &Sub[0], &Sub[2]);
            }
            else
            {
                vBar[i].subbar(NRev/2);
            }
        }

        vBar[58] = vBar[58] + vBar[59] * tmpv(vsub[59], 2);
        vBar[57] = vBar[57] + vBar[59] * tmpv(vsub[59], 1);
        vBar[53] = vBar[53] + vBar[58] * tmpv(vsub[58], 1);
        vBar[55] = vBar[55] + vBar[58] * tmpv(vsub[58], 2);
        vBar[56] = vBar[56] + vBar[57] * tmpv(vsub[57], 2);
        vBar[1] = vBar[1] + vBar[57] * tmpv(vsub[57], 1);
        vBar[9] = vBar[9] + vBar[56] * tmpv(vsub[56], 1);
        vBar[34] = vBar[34] + vBar[56] * tmpv(vsub[56], 2);
        vBar[54] = vBar[54] + vBar[55] * tmpv(vsub[55], 2);
        vBar[0] = vBar[0] + vBar[55] * tmpv(vsub[55], 1);
        vBar[8] = vBar[8] + vBar[54] * tmpv(vsub[54], 1);
        vBar[22] = vBar[22] + vBar[54] * tmpv(vsub[54], 2);
        vBar[52] = vBar[52] + vBar[53] * tmpv(vsub[53], 2);
        vBar[50] = vBar[50] + vBar[53] * tmpv(vsub[53], 1);
        vBar[51] = vBar[51] + vBar[52] * tmpv(vsub[52], 2);
        vBar[4] = vBar[4] + vBar[52] * tmpv(vsub[52], 1);
        vBar[49] = vBar[49] + vBar[50] * tmpv(vsub[50], 2);
        vBar[48] = vBar[48] + vBar[50] * tmpv(vsub[50], 1);
        vBar[45] = vBar[45] + vBar[48] * tmpv(vsub[48], 1);
        vBar[47] = vBar[47] + vBar[48] * tmpv(vsub[48], 2);
        vBar[46] = vBar[46] + vBar[47] * tmpv(vsub[47], 2);
        vBar[42] = vBar[42] + vBar[47] * tmpv(vsub[47], 1);
        vBar[43] = vBar[43] + vBar[45] * tmpv(vsub[45], 1);
        vBar[44] = vBar[44] + vBar[45] * tmpv(vsub[45], 2);
        vBar[4] = vBar[4] + vBar[43] * tmpv(vsub[43], 2);
        vBar[3] = vBar[3] + vBar[43] * tmpv(vsub[43], 1);
        vBar[37] = vBar[37] + vBar[42] * tmpv(vsub[42], 1);
        vBar[41] = vBar[41] + vBar[42] * tmpv(vsub[42], 2);
        vBar[40] = vBar[40] + vBar[41] * tmpv(vsub[41], 2);
        vBar[1] = vBar[1] + vBar[41] * tmpv(vsub[41], 1);
        vBar[39] = vBar[39] + vBar[40] * tmpv(vsub[40], 2);
        vBar[34] = vBar[34] + vBar[40] * tmpv(vsub[40], 1);
        vBar[10] = vBar[10] + vBar[39] * tmpv(vsub[39], 1);
        vBar[38] = vBar[38] + vBar[39] * tmpv(vsub[39], 2);
        vBar[35] = vBar[35] + vBar[37] * tmpv(vsub[37], 1);
        vBar[36] = vBar[36] + vBar[37] * tmpv(vsub[37], 2);
        vBar[4] = vBar[4] + vBar[35] * tmpv(vsub[35], 2);
        vBar[3] = vBar[3] + vBar[35] * tmpv(vsub[35], 1);
        vBar[33] = vBar[33] + vBar[34] * tmpv(vsub[34], 2);
        vBar[32] = vBar[32] + vBar[34] * tmpv(vsub[34], 1);
        vBar[31] = vBar[31] + vBar[32] * tmpv(vsub[32], 2);
        vBar[30] = vBar[30] + vBar[32] * tmpv(vsub[32], 1);
        vBar[29] = vBar[29] + vBar[30] * tmpv(vsub[30], 2);
        vBar[27] = vBar[27] + vBar[30] * tmpv(vsub[30], 1);
        vBar[28] = vBar[28] + vBar[29] * tmpv(vsub[29], 2);
        vBar[25] = vBar[25] + vBar[29] * tmpv(vsub[29], 1);
        vBar[3] = vBar[3] + vBar[27] * tmpv(vsub[27], 1);
        vBar[26] = vBar[26] + vBar[27] * tmpv(vsub[27], 2);
        vBar[11] = vBar[11] + vBar[25] * tmpv(vsub[25], 1);
        vBar[24] = vBar[24] + vBar[25] * tmpv(vsub[25], 2);
        vBar[23] = vBar[23] + vBar[24] * tmpv(vsub[24], 2);
        vBar[3] = vBar[3] + vBar[24] * tmpv(vsub[24], 1);
        vBar[21] = vBar[21] + vBar[22] * tmpv(vsub[22], 2);
        vBar[20] = vBar[20] + vBar[22] * tmpv(vsub[22], 1);
        vBar[19] = vBar[19] + vBar[20] * tmpv(vsub[20], 2);
        vBar[18] = vBar[18] + vBar[20] * tmpv(vsub[20], 1);
        vBar[17] = vBar[17] + vBar[18] * tmpv(vsub[18], 2);
        vBar[16] = vBar[16] + vBar[18] * tmpv(vsub[18], 1);
        vBar[15] = vBar[15] + vBar[16] * tmpv(vsub[16], 2);
        vBar[14] = vBar[14] + vBar[16] * tmpv(vsub[16], 1);
        vBar[13] = vBar[13] + vBar[14] * tmpv(vsub[14], 2);
        vBar[2] = vBar[2] + vBar[14] * tmpv(vsub[14], 1);
    
        break;

    }
    
    for (int j = 0; j < NX; j++)
    {
        for (int i = 0; i < NRev/2; i++)
        {
            Ith(adcvcc, 2 * j + i + 1) = vBar[j].cvsubbar(i);
            Ith(adcvcc, 2 * NX + 2 * j + i + 1) = vBar[j].ccsubbar(i);
        }
    }
    
    for(int i = 0; i < L; i++) {
        delete[] vsub[i];
    }
    delete[] vsub;
    
    SUNContext_Free(&sunctx);
    return adcvcc;
    
}

/*
* Reverse mode of automatic differentiation
* Computations of df/dp required by evalutaing fQB
*/
N_Vector fRevAD_dfdp(MC xMC[NX], MC pMC[NP], double sub[NRev * NRev], int n)
{
    SUNContext sunctx;
    SUNContext_Create(NULL, &sunctx);
    RevMC vBar[L];
    MC v[L];
    N_Vector adcvcc = N_VNew_Serial(NRev/2 * NP, sunctx);
    for (int j = 0; j < NRev/2 * NP; j++)
    {
        Ith(adcvcc, j + 1) = 0;
    }

    double** vsub = new double*[L];
    for(int i = 0; i < L; i++) {
        vsub[i] = new double[NRev * 2];
    }

    
    /*
    *-----------------------------------------------------------------
    * The following code was automatically generated by ReverseMC.jl.
    *-----------------------------------------------------------------
    */
            
    switch (n)
    {

    case 0:
        v[0] = xMC[0];
        v[1] = xMC[1];
        v[2] = xMC[2];
        v[3] = xMC[3];
        v[4] = xMC[4];
        v[5] = pMC[0];
        v[6] = pMC[1];
        v[7] = pMC[2];
        v[8] = pMC[3];
        v[9] = pMC[4];
        v[10] = pMC[5];
        v[11] = pMC[6];
        v[12] = pMC[7];
        v[13] = 1.0;


        v[14] = v[13] / v[2];

        for (int i = 0; i < NRev; i++)
        {
            vsub[14][i] = v[14].cvsub(i);
            vsub[14][NRev + i] = v[14].ccsub(i);
        }
    
        v[15] = 7.1;

        v[14].sub(NRev, &sub[0], &sub[4]);
        v[16] = v[15] * v[14];

        for (int i = 0; i < NRev; i++)
        {
            vsub[16][i] = v[16].cvsub(i);
            vsub[16][NRev + i] = v[16].ccsub(i);
        }
    
        v[17] = 1.0;

        v[16].sub(NRev, &sub[0], &sub[4]);
        v[18] = v[17] + v[16];

        for (int i = 0; i < NRev; i++)
        {
            vsub[18][i] = v[18].cvsub(i);
            vsub[18][NRev + i] = v[18].ccsub(i);
        }
    
        v[19] = 1.0;

        v[18].sub(NRev, &sub[0], &sub[4]);
        v[20] = v[19] / v[18];

        for (int i = 0; i < NRev; i++)
        {
            vsub[20][i] = v[20].cvsub(i);
            vsub[20][NRev + i] = v[20].ccsub(i);
        }
    
        v[21] = 1.2;

        v[20].sub(NRev, &sub[0], &sub[4]);
        v[22] = v[21] * v[20];

        for (int i = 0; i < NRev; i++)
        {
            vsub[22][i] = v[22].cvsub(i);
            vsub[22][NRev + i] = v[22].ccsub(i);
        }
    
        v[23] = 1.0;


        v[24] = v[23] / v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[24][i] = v[24].cvsub(i);
            vsub[24][NRev + i] = v[24].ccsub(i);
        }
    
        v[11].sub(NRev, &sub[0], &sub[4]);
        v[24].sub(NRev, &sub[8], &sub[12]);
        v[25] = v[11] * v[24];

        for (int i = 0; i < NRev; i++)
        {
            vsub[25][i] = v[25].cvsub(i);
            vsub[25][NRev + i] = v[25].ccsub(i);
        }
    
        v[26] = 0.00390625;


        v[27] = v[3] * v[26];

        for (int i = 0; i < NRev; i++)
        {
            vsub[27][i] = v[27].cvsub(i);
            vsub[27][NRev + i] = v[27].ccsub(i);
        }
    
        v[28] = 1.0;

        v[25].sub(NRev, &sub[0], &sub[4]);
        v[29] = v[28] + v[25];

        for (int i = 0; i < NRev; i++)
        {
            vsub[29][i] = v[29].cvsub(i);
            vsub[29][NRev + i] = v[29].ccsub(i);
        }
    
        v[29].sub(NRev, &sub[8], &sub[12]);
        v[27].sub(NRev, &sub[0], &sub[4]);
        v[30] = v[29] + v[27];

        for (int i = 0; i < NRev; i++)
        {
            vsub[30][i] = v[30].cvsub(i);
            vsub[30][NRev + i] = v[30].ccsub(i);
        }
    
        v[31] = 1.0;

        v[30].sub(NRev, &sub[0], &sub[4]);
        v[32] = v[31] / v[30];

        for (int i = 0; i < NRev; i++)
        {
            vsub[32][i] = v[32].cvsub(i);
            vsub[32][NRev + i] = v[32].ccsub(i);
        }
    
        v[33] = 0.74;

        v[32].sub(NRev, &sub[0], &sub[4]);
        v[34] = v[33] * v[32];

        for (int i = 0; i < NRev; i++)
        {
            vsub[34][i] = v[34].cvsub(i);
            vsub[34][NRev + i] = v[34].ccsub(i);
        }
    


        v[35] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[35][i] = v[35].cvsub(i);
            vsub[35][NRev + i] = v[35].ccsub(i);
        }
    
        v[36] = 34.0;
        v[35].sub(NRev, &sub[0], &sub[4]);

        v[37] = v[35] - v[36];

        for (int i = 0; i < NRev; i++)
        {
            vsub[37][i] = v[37].cvsub(i);
            vsub[37][NRev + i] = v[37].ccsub(i);
        }
    
        v[38] = 0.050505050505050504;
        v[10].sub(NRev, &sub[0], &sub[4]);

        v[39] = v[10] * v[38];

        for (int i = 0; i < NRev; i++)
        {
            vsub[39][i] = v[39].cvsub(i);
            vsub[39][NRev + i] = v[39].ccsub(i);
        }
    
        v[39].sub(NRev, &sub[8], &sub[12]);
        v[34].sub(NRev, &sub[0], &sub[4]);
        v[40] = v[39] * v[34];

        for (int i = 0; i < NRev; i++)
        {
            vsub[40][i] = v[40].cvsub(i);
            vsub[40][NRev + i] = v[40].ccsub(i);
        }
    
        v[40].sub(NRev, &sub[8], &sub[12]);

        v[41] = v[40] * v[1];

        for (int i = 0; i < NRev; i++)
        {
            vsub[41][i] = v[41].cvsub(i);
            vsub[41][NRev + i] = v[41].ccsub(i);
        }
    
        v[37].sub(NRev, &sub[0], &sub[4]);
        v[41].sub(NRev, &sub[8], &sub[12]);
        v[42] = v[37] + v[41];

        for (int i = 0; i < NRev; i++)
        {
            vsub[42][i] = v[42].cvsub(i);
            vsub[42][NRev + i] = v[42].ccsub(i);
        }
    


        v[43] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[43][i] = v[43].cvsub(i);
            vsub[43][NRev + i] = v[43].ccsub(i);
        }
    
        v[44] = 50.0;
        v[43].sub(NRev, &sub[0], &sub[4]);

        v[45] = v[43] - v[44];

        for (int i = 0; i < NRev; i++)
        {
            vsub[45][i] = v[45].cvsub(i);
            vsub[45][NRev + i] = v[45].ccsub(i);
        }
    
        v[46] = 0.5;

        v[42].sub(NRev, &sub[0], &sub[4]);
        v[47] = v[46] * v[42];

        for (int i = 0; i < NRev; i++)
        {
            vsub[47][i] = v[47].cvsub(i);
            vsub[47][NRev + i] = v[47].ccsub(i);
        }
    
        v[45].sub(NRev, &sub[0], &sub[4]);
        v[47].sub(NRev, &sub[8], &sub[12]);
        v[48] = v[45] - v[47];

        for (int i = 0; i < NRev; i++)
        {
            vsub[48][i] = v[48].cvsub(i);
            vsub[48][NRev + i] = v[48].ccsub(i);
        }
    
        v[49] = 19.8;

        v[48].sub(NRev, &sub[0], &sub[4]);
        v[50] = v[49] * v[48];

        for (int i = 0; i < NRev; i++)
        {
            vsub[50][i] = v[50].cvsub(i);
            vsub[50][NRev + i] = v[50].ccsub(i);
        }
    
        v[51] = 0.2;
        v[22].sub(NRev, &sub[0], &sub[4]);

        v[52] = v[22] - v[51];

        for (int i = 0; i < NRev; i++)
        {
            vsub[52][i] = v[52].cvsub(i);
            vsub[52][NRev + i] = v[52].ccsub(i);
        }
    
        v[52].sub(NRev, &sub[8], &sub[12]);

        v[53] = v[52] * v[0];

        for (int i = 0; i < NRev; i++)
        {
            vsub[53][i] = v[53].cvsub(i);
            vsub[53][NRev + i] = v[53].ccsub(i);
        }
    
        //-----------------------------------------------------------------------
        // Evaluate subgradients with reverse sweep through computational graph

        for (int i = 0; i < L1; i++)
        {
            //vBar[i] = RevMC(v[i]);
            if (i == L1 - 1)
            {
                double Sub[NRev] = {1,0,0,1};
                vBar[i].subbar(NRev/2, &Sub[0], &Sub[2]);
            }
            else
            {
                vBar[i].subbar(NRev/2);
            }
        }

        vBar[52] = vBar[52] + vBar[53] * tmpv(vsub[53], 2);
        vBar[0] = vBar[0] + vBar[53] * tmpv(vsub[53], 1);
        vBar[22] = vBar[22] + vBar[52] * tmpv(vsub[52], 1);
        vBar[51] = vBar[51] + vBar[52] * tmpv(vsub[52], 2);
        vBar[49] = vBar[49] + vBar[50] * tmpv(vsub[50], 2);
        vBar[48] = vBar[48] + vBar[50] * tmpv(vsub[50], 1);
        vBar[45] = vBar[45] + vBar[48] * tmpv(vsub[48], 1);
        vBar[47] = vBar[47] + vBar[48] * tmpv(vsub[48], 2);
        vBar[46] = vBar[46] + vBar[47] * tmpv(vsub[47], 2);
        vBar[42] = vBar[42] + vBar[47] * tmpv(vsub[47], 1);
        vBar[43] = vBar[43] + vBar[45] * tmpv(vsub[45], 1);
        vBar[44] = vBar[44] + vBar[45] * tmpv(vsub[45], 2);
        vBar[4] = vBar[4] + vBar[43] * tmpv(vsub[43], 2);
        vBar[3] = vBar[3] + vBar[43] * tmpv(vsub[43], 1);
        vBar[37] = vBar[37] + vBar[42] * tmpv(vsub[42], 1);
        vBar[41] = vBar[41] + vBar[42] * tmpv(vsub[42], 2);
        vBar[40] = vBar[40] + vBar[41] * tmpv(vsub[41], 2);
        vBar[1] = vBar[1] + vBar[41] * tmpv(vsub[41], 1);
        vBar[39] = vBar[39] + vBar[40] * tmpv(vsub[40], 2);
        vBar[34] = vBar[34] + vBar[40] * tmpv(vsub[40], 1);
        vBar[10] = vBar[10] + vBar[39] * tmpv(vsub[39], 1);
        vBar[38] = vBar[38] + vBar[39] * tmpv(vsub[39], 2);
        vBar[35] = vBar[35] + vBar[37] * tmpv(vsub[37], 1);
        vBar[36] = vBar[36] + vBar[37] * tmpv(vsub[37], 2);
        vBar[4] = vBar[4] + vBar[35] * tmpv(vsub[35], 2);
        vBar[3] = vBar[3] + vBar[35] * tmpv(vsub[35], 1);
        vBar[33] = vBar[33] + vBar[34] * tmpv(vsub[34], 2);
        vBar[32] = vBar[32] + vBar[34] * tmpv(vsub[34], 1);
        vBar[31] = vBar[31] + vBar[32] * tmpv(vsub[32], 2);
        vBar[30] = vBar[30] + vBar[32] * tmpv(vsub[32], 1);
        vBar[29] = vBar[29] + vBar[30] * tmpv(vsub[30], 2);
        vBar[27] = vBar[27] + vBar[30] * tmpv(vsub[30], 1);
        vBar[28] = vBar[28] + vBar[29] * tmpv(vsub[29], 2);
        vBar[25] = vBar[25] + vBar[29] * tmpv(vsub[29], 1);
        vBar[3] = vBar[3] + vBar[27] * tmpv(vsub[27], 1);
        vBar[26] = vBar[26] + vBar[27] * tmpv(vsub[27], 2);
        vBar[11] = vBar[11] + vBar[25] * tmpv(vsub[25], 1);
        vBar[24] = vBar[24] + vBar[25] * tmpv(vsub[25], 2);
        vBar[23] = vBar[23] + vBar[24] * tmpv(vsub[24], 2);
        vBar[3] = vBar[3] + vBar[24] * tmpv(vsub[24], 1);
        vBar[21] = vBar[21] + vBar[22] * tmpv(vsub[22], 2);
        vBar[20] = vBar[20] + vBar[22] * tmpv(vsub[22], 1);
        vBar[19] = vBar[19] + vBar[20] * tmpv(vsub[20], 2);
        vBar[18] = vBar[18] + vBar[20] * tmpv(vsub[20], 1);
        vBar[17] = vBar[17] + vBar[18] * tmpv(vsub[18], 2);
        vBar[16] = vBar[16] + vBar[18] * tmpv(vsub[18], 1);
        vBar[15] = vBar[15] + vBar[16] * tmpv(vsub[16], 2);
        vBar[14] = vBar[14] + vBar[16] * tmpv(vsub[16], 1);
        vBar[13] = vBar[13] + vBar[14] * tmpv(vsub[14], 2);
        vBar[2] = vBar[2] + vBar[14] * tmpv(vsub[14], 1);
    
        break;

    case 1:
        v[0] = xMC[0];
        v[1] = xMC[1];
        v[2] = xMC[2];
        v[3] = xMC[3];
        v[4] = xMC[4];
        v[5] = pMC[0];
        v[6] = pMC[1];
        v[7] = pMC[2];
        v[8] = pMC[3];
        v[9] = pMC[4];
        v[10] = pMC[5];
        v[11] = pMC[6];
        v[12] = pMC[7];
        v[13] = 1.0;


        v[14] = v[13] / v[2];

        for (int i = 0; i < NRev; i++)
        {
            vsub[14][i] = v[14].cvsub(i);
            vsub[14][NRev + i] = v[14].ccsub(i);
        }
    
        v[15] = 7.1;

        v[14].sub(NRev, &sub[0], &sub[4]);
        v[16] = v[15] * v[14];

        for (int i = 0; i < NRev; i++)
        {
            vsub[16][i] = v[16].cvsub(i);
            vsub[16][NRev + i] = v[16].ccsub(i);
        }
    
        v[17] = 1.0;

        v[16].sub(NRev, &sub[0], &sub[4]);
        v[18] = v[17] + v[16];

        for (int i = 0; i < NRev; i++)
        {
            vsub[18][i] = v[18].cvsub(i);
            vsub[18][NRev + i] = v[18].ccsub(i);
        }
    
        v[19] = 1.0;

        v[18].sub(NRev, &sub[0], &sub[4]);
        v[20] = v[19] / v[18];

        for (int i = 0; i < NRev; i++)
        {
            vsub[20][i] = v[20].cvsub(i);
            vsub[20][NRev + i] = v[20].ccsub(i);
        }
    
        v[21] = 1.2;

        v[20].sub(NRev, &sub[0], &sub[4]);
        v[22] = v[21] * v[20];

        for (int i = 0; i < NRev; i++)
        {
            vsub[22][i] = v[22].cvsub(i);
            vsub[22][NRev + i] = v[22].ccsub(i);
        }
    
        v[23] = 1.0;


        v[24] = v[23] / v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[24][i] = v[24].cvsub(i);
            vsub[24][NRev + i] = v[24].ccsub(i);
        }
    
        v[11].sub(NRev, &sub[0], &sub[4]);
        v[24].sub(NRev, &sub[8], &sub[12]);
        v[25] = v[11] * v[24];

        for (int i = 0; i < NRev; i++)
        {
            vsub[25][i] = v[25].cvsub(i);
            vsub[25][NRev + i] = v[25].ccsub(i);
        }
    
        v[26] = 0.00390625;


        v[27] = v[3] * v[26];

        for (int i = 0; i < NRev; i++)
        {
            vsub[27][i] = v[27].cvsub(i);
            vsub[27][NRev + i] = v[27].ccsub(i);
        }
    
        v[28] = 1.0;

        v[25].sub(NRev, &sub[0], &sub[4]);
        v[29] = v[28] + v[25];

        for (int i = 0; i < NRev; i++)
        {
            vsub[29][i] = v[29].cvsub(i);
            vsub[29][NRev + i] = v[29].ccsub(i);
        }
    
        v[29].sub(NRev, &sub[8], &sub[12]);
        v[27].sub(NRev, &sub[0], &sub[4]);
        v[30] = v[29] + v[27];

        for (int i = 0; i < NRev; i++)
        {
            vsub[30][i] = v[30].cvsub(i);
            vsub[30][NRev + i] = v[30].ccsub(i);
        }
    
        v[31] = 1.0;

        v[30].sub(NRev, &sub[0], &sub[4]);
        v[32] = v[31] / v[30];

        for (int i = 0; i < NRev; i++)
        {
            vsub[32][i] = v[32].cvsub(i);
            vsub[32][NRev + i] = v[32].ccsub(i);
        }
    
        v[33] = 0.74;

        v[32].sub(NRev, &sub[0], &sub[4]);
        v[34] = v[33] * v[32];

        for (int i = 0; i < NRev; i++)
        {
            vsub[34][i] = v[34].cvsub(i);
            vsub[34][NRev + i] = v[34].ccsub(i);
        }
    


        v[35] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[35][i] = v[35].cvsub(i);
            vsub[35][NRev + i] = v[35].ccsub(i);
        }
    
        v[36] = 34.0;
        v[35].sub(NRev, &sub[0], &sub[4]);

        v[37] = v[35] - v[36];

        for (int i = 0; i < NRev; i++)
        {
            vsub[37][i] = v[37].cvsub(i);
            vsub[37][NRev + i] = v[37].ccsub(i);
        }
    
        v[38] = 0.050505050505050504;
        v[10].sub(NRev, &sub[0], &sub[4]);

        v[39] = v[10] * v[38];

        for (int i = 0; i < NRev; i++)
        {
            vsub[39][i] = v[39].cvsub(i);
            vsub[39][NRev + i] = v[39].ccsub(i);
        }
    
        v[39].sub(NRev, &sub[8], &sub[12]);
        v[34].sub(NRev, &sub[0], &sub[4]);
        v[40] = v[39] * v[34];

        for (int i = 0; i < NRev; i++)
        {
            vsub[40][i] = v[40].cvsub(i);
            vsub[40][NRev + i] = v[40].ccsub(i);
        }
    
        v[40].sub(NRev, &sub[8], &sub[12]);

        v[41] = v[40] * v[1];

        for (int i = 0; i < NRev; i++)
        {
            vsub[41][i] = v[41].cvsub(i);
            vsub[41][NRev + i] = v[41].ccsub(i);
        }
    
        v[37].sub(NRev, &sub[0], &sub[4]);
        v[41].sub(NRev, &sub[8], &sub[12]);
        v[42] = v[37] + v[41];

        for (int i = 0; i < NRev; i++)
        {
            vsub[42][i] = v[42].cvsub(i);
            vsub[42][NRev + i] = v[42].ccsub(i);
        }
    


        v[43] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[43][i] = v[43].cvsub(i);
            vsub[43][NRev + i] = v[43].ccsub(i);
        }
    
        v[44] = 50.0;
        v[43].sub(NRev, &sub[0], &sub[4]);

        v[45] = v[43] - v[44];

        for (int i = 0; i < NRev; i++)
        {
            vsub[45][i] = v[45].cvsub(i);
            vsub[45][NRev + i] = v[45].ccsub(i);
        }
    
        v[46] = 0.5;

        v[42].sub(NRev, &sub[0], &sub[4]);
        v[47] = v[46] * v[42];

        for (int i = 0; i < NRev; i++)
        {
            vsub[47][i] = v[47].cvsub(i);
            vsub[47][NRev + i] = v[47].ccsub(i);
        }
    
        v[45].sub(NRev, &sub[0], &sub[4]);
        v[47].sub(NRev, &sub[8], &sub[12]);
        v[48] = v[45] - v[47];

        for (int i = 0; i < NRev; i++)
        {
            vsub[48][i] = v[48].cvsub(i);
            vsub[48][NRev + i] = v[48].ccsub(i);
        }
    
        v[49] = 19.8;

        v[48].sub(NRev, &sub[0], &sub[4]);
        v[50] = v[49] * v[48];

        for (int i = 0; i < NRev; i++)
        {
            vsub[50][i] = v[50].cvsub(i);
            vsub[50][NRev + i] = v[50].ccsub(i);
        }
    
        v[51] = 0.2;
        v[34].sub(NRev, &sub[0], &sub[4]);

        v[52] = v[34] - v[51];

        for (int i = 0; i < NRev; i++)
        {
            vsub[52][i] = v[52].cvsub(i);
            vsub[52][NRev + i] = v[52].ccsub(i);
        }
    
        v[52].sub(NRev, &sub[8], &sub[12]);

        v[53] = v[52] * v[1];

        for (int i = 0; i < NRev; i++)
        {
            vsub[53][i] = v[53].cvsub(i);
            vsub[53][NRev + i] = v[53].ccsub(i);
        }
    
        //-----------------------------------------------------------------------
        // Evaluate subgradients with reverse sweep through computational graph

        for (int i = 0; i < L2; i++)
        {
            //vBar[i] = RevMC(v[i]);
            if (i == L2 - 1)
            {
                double Sub[NRev] = {1,0,0,1};
                vBar[i].subbar(NRev/2, &Sub[0], &Sub[2]);
            }
            else
            {
                vBar[i].subbar(NRev/2);
            }
        }

        vBar[52] = vBar[52] + vBar[53] * tmpv(vsub[53], 2);
        vBar[1] = vBar[1] + vBar[53] * tmpv(vsub[53], 1);
        vBar[34] = vBar[34] + vBar[52] * tmpv(vsub[52], 1);
        vBar[51] = vBar[51] + vBar[52] * tmpv(vsub[52], 2);
        vBar[49] = vBar[49] + vBar[50] * tmpv(vsub[50], 2);
        vBar[48] = vBar[48] + vBar[50] * tmpv(vsub[50], 1);
        vBar[45] = vBar[45] + vBar[48] * tmpv(vsub[48], 1);
        vBar[47] = vBar[47] + vBar[48] * tmpv(vsub[48], 2);
        vBar[46] = vBar[46] + vBar[47] * tmpv(vsub[47], 2);
        vBar[42] = vBar[42] + vBar[47] * tmpv(vsub[47], 1);
        vBar[43] = vBar[43] + vBar[45] * tmpv(vsub[45], 1);
        vBar[44] = vBar[44] + vBar[45] * tmpv(vsub[45], 2);
        vBar[4] = vBar[4] + vBar[43] * tmpv(vsub[43], 2);
        vBar[3] = vBar[3] + vBar[43] * tmpv(vsub[43], 1);
        vBar[37] = vBar[37] + vBar[42] * tmpv(vsub[42], 1);
        vBar[41] = vBar[41] + vBar[42] * tmpv(vsub[42], 2);
        vBar[40] = vBar[40] + vBar[41] * tmpv(vsub[41], 2);
        vBar[1] = vBar[1] + vBar[41] * tmpv(vsub[41], 1);
        vBar[39] = vBar[39] + vBar[40] * tmpv(vsub[40], 2);
        vBar[34] = vBar[34] + vBar[40] * tmpv(vsub[40], 1);
        vBar[10] = vBar[10] + vBar[39] * tmpv(vsub[39], 1);
        vBar[38] = vBar[38] + vBar[39] * tmpv(vsub[39], 2);
        vBar[35] = vBar[35] + vBar[37] * tmpv(vsub[37], 1);
        vBar[36] = vBar[36] + vBar[37] * tmpv(vsub[37], 2);
        vBar[4] = vBar[4] + vBar[35] * tmpv(vsub[35], 2);
        vBar[3] = vBar[3] + vBar[35] * tmpv(vsub[35], 1);
        vBar[33] = vBar[33] + vBar[34] * tmpv(vsub[34], 2);
        vBar[32] = vBar[32] + vBar[34] * tmpv(vsub[34], 1);
        vBar[31] = vBar[31] + vBar[32] * tmpv(vsub[32], 2);
        vBar[30] = vBar[30] + vBar[32] * tmpv(vsub[32], 1);
        vBar[29] = vBar[29] + vBar[30] * tmpv(vsub[30], 2);
        vBar[27] = vBar[27] + vBar[30] * tmpv(vsub[30], 1);
        vBar[28] = vBar[28] + vBar[29] * tmpv(vsub[29], 2);
        vBar[25] = vBar[25] + vBar[29] * tmpv(vsub[29], 1);
        vBar[3] = vBar[3] + vBar[27] * tmpv(vsub[27], 1);
        vBar[26] = vBar[26] + vBar[27] * tmpv(vsub[27], 2);
        vBar[11] = vBar[11] + vBar[25] * tmpv(vsub[25], 1);
        vBar[24] = vBar[24] + vBar[25] * tmpv(vsub[25], 2);
        vBar[23] = vBar[23] + vBar[24] * tmpv(vsub[24], 2);
        vBar[3] = vBar[3] + vBar[24] * tmpv(vsub[24], 1);
        vBar[21] = vBar[21] + vBar[22] * tmpv(vsub[22], 2);
        vBar[20] = vBar[20] + vBar[22] * tmpv(vsub[22], 1);
        vBar[19] = vBar[19] + vBar[20] * tmpv(vsub[20], 2);
        vBar[18] = vBar[18] + vBar[20] * tmpv(vsub[20], 1);
        vBar[17] = vBar[17] + vBar[18] * tmpv(vsub[18], 2);
        vBar[16] = vBar[16] + vBar[18] * tmpv(vsub[18], 1);
        vBar[15] = vBar[15] + vBar[16] * tmpv(vsub[16], 2);
        vBar[14] = vBar[14] + vBar[16] * tmpv(vsub[16], 1);
        vBar[13] = vBar[13] + vBar[14] * tmpv(vsub[14], 2);
        vBar[2] = vBar[2] + vBar[14] * tmpv(vsub[14], 1);
    
        break;

    case 2:
        v[0] = xMC[0];
        v[1] = xMC[1];
        v[2] = xMC[2];
        v[3] = xMC[3];
        v[4] = xMC[4];
        v[5] = pMC[0];
        v[6] = pMC[1];
        v[7] = pMC[2];
        v[8] = pMC[3];
        v[9] = pMC[4];
        v[10] = pMC[5];
        v[11] = pMC[6];
        v[12] = pMC[7];
        v[13] = 1.0;


        v[14] = v[13] / v[2];

        for (int i = 0; i < NRev; i++)
        {
            vsub[14][i] = v[14].cvsub(i);
            vsub[14][NRev + i] = v[14].ccsub(i);
        }
    
        v[15] = 7.1;

        v[14].sub(NRev, &sub[0], &sub[4]);
        v[16] = v[15] * v[14];

        for (int i = 0; i < NRev; i++)
        {
            vsub[16][i] = v[16].cvsub(i);
            vsub[16][NRev + i] = v[16].ccsub(i);
        }
    
        v[17] = 1.0;

        v[16].sub(NRev, &sub[0], &sub[4]);
        v[18] = v[17] + v[16];

        for (int i = 0; i < NRev; i++)
        {
            vsub[18][i] = v[18].cvsub(i);
            vsub[18][NRev + i] = v[18].ccsub(i);
        }
    
        v[19] = 1.0;

        v[18].sub(NRev, &sub[0], &sub[4]);
        v[20] = v[19] / v[18];

        for (int i = 0; i < NRev; i++)
        {
            vsub[20][i] = v[20].cvsub(i);
            vsub[20][NRev + i] = v[20].ccsub(i);
        }
    
        v[21] = 1.2;

        v[20].sub(NRev, &sub[0], &sub[4]);
        v[22] = v[21] * v[20];

        for (int i = 0; i < NRev; i++)
        {
            vsub[22][i] = v[22].cvsub(i);
            vsub[22][NRev + i] = v[22].ccsub(i);
        }
    
        v[23] = 1.0;


        v[24] = v[23] / v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[24][i] = v[24].cvsub(i);
            vsub[24][NRev + i] = v[24].ccsub(i);
        }
    
        v[11].sub(NRev, &sub[0], &sub[4]);
        v[24].sub(NRev, &sub[8], &sub[12]);
        v[25] = v[11] * v[24];

        for (int i = 0; i < NRev; i++)
        {
            vsub[25][i] = v[25].cvsub(i);
            vsub[25][NRev + i] = v[25].ccsub(i);
        }
    
        v[26] = 0.00390625;


        v[27] = v[3] * v[26];

        for (int i = 0; i < NRev; i++)
        {
            vsub[27][i] = v[27].cvsub(i);
            vsub[27][NRev + i] = v[27].ccsub(i);
        }
    
        v[28] = 1.0;

        v[25].sub(NRev, &sub[0], &sub[4]);
        v[29] = v[28] + v[25];

        for (int i = 0; i < NRev; i++)
        {
            vsub[29][i] = v[29].cvsub(i);
            vsub[29][NRev + i] = v[29].ccsub(i);
        }
    
        v[29].sub(NRev, &sub[8], &sub[12]);
        v[27].sub(NRev, &sub[0], &sub[4]);
        v[30] = v[29] + v[27];

        for (int i = 0; i < NRev; i++)
        {
            vsub[30][i] = v[30].cvsub(i);
            vsub[30][NRev + i] = v[30].ccsub(i);
        }
    
        v[31] = 1.0;

        v[30].sub(NRev, &sub[0], &sub[4]);
        v[32] = v[31] / v[30];

        for (int i = 0; i < NRev; i++)
        {
            vsub[32][i] = v[32].cvsub(i);
            vsub[32][NRev + i] = v[32].ccsub(i);
        }
    
        v[33] = 0.74;

        v[32].sub(NRev, &sub[0], &sub[4]);
        v[34] = v[33] * v[32];

        for (int i = 0; i < NRev; i++)
        {
            vsub[34][i] = v[34].cvsub(i);
            vsub[34][NRev + i] = v[34].ccsub(i);
        }
    


        v[35] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[35][i] = v[35].cvsub(i);
            vsub[35][NRev + i] = v[35].ccsub(i);
        }
    
        v[36] = 34.0;
        v[35].sub(NRev, &sub[0], &sub[4]);

        v[37] = v[35] - v[36];

        for (int i = 0; i < NRev; i++)
        {
            vsub[37][i] = v[37].cvsub(i);
            vsub[37][NRev + i] = v[37].ccsub(i);
        }
    
        v[38] = 0.050505050505050504;
        v[10].sub(NRev, &sub[0], &sub[4]);

        v[39] = v[10] * v[38];

        for (int i = 0; i < NRev; i++)
        {
            vsub[39][i] = v[39].cvsub(i);
            vsub[39][NRev + i] = v[39].ccsub(i);
        }
    
        v[39].sub(NRev, &sub[8], &sub[12]);
        v[34].sub(NRev, &sub[0], &sub[4]);
        v[40] = v[39] * v[34];

        for (int i = 0; i < NRev; i++)
        {
            vsub[40][i] = v[40].cvsub(i);
            vsub[40][NRev + i] = v[40].ccsub(i);
        }
    
        v[40].sub(NRev, &sub[8], &sub[12]);

        v[41] = v[40] * v[1];

        for (int i = 0; i < NRev; i++)
        {
            vsub[41][i] = v[41].cvsub(i);
            vsub[41][NRev + i] = v[41].ccsub(i);
        }
    
        v[37].sub(NRev, &sub[0], &sub[4]);
        v[41].sub(NRev, &sub[8], &sub[12]);
        v[42] = v[37] + v[41];

        for (int i = 0; i < NRev; i++)
        {
            vsub[42][i] = v[42].cvsub(i);
            vsub[42][NRev + i] = v[42].ccsub(i);
        }
    


        v[43] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[43][i] = v[43].cvsub(i);
            vsub[43][NRev + i] = v[43].ccsub(i);
        }
    
        v[44] = 50.0;
        v[43].sub(NRev, &sub[0], &sub[4]);

        v[45] = v[43] - v[44];

        for (int i = 0; i < NRev; i++)
        {
            vsub[45][i] = v[45].cvsub(i);
            vsub[45][NRev + i] = v[45].ccsub(i);
        }
    
        v[46] = 0.5;

        v[42].sub(NRev, &sub[0], &sub[4]);
        v[47] = v[46] * v[42];

        for (int i = 0; i < NRev; i++)
        {
            vsub[47][i] = v[47].cvsub(i);
            vsub[47][NRev + i] = v[47].ccsub(i);
        }
    
        v[45].sub(NRev, &sub[0], &sub[4]);
        v[47].sub(NRev, &sub[8], &sub[12]);
        v[48] = v[45] - v[47];

        for (int i = 0; i < NRev; i++)
        {
            vsub[48][i] = v[48].cvsub(i);
            vsub[48][NRev + i] = v[48].ccsub(i);
        }
    
        v[49] = 19.8;

        v[48].sub(NRev, &sub[0], &sub[4]);
        v[50] = v[49] * v[48];

        for (int i = 0; i < NRev; i++)
        {
            vsub[50][i] = v[50].cvsub(i);
            vsub[50][NRev + i] = v[50].ccsub(i);
        }
    
        v[51] = 5.0;


        v[52] = v[51] - v[2];

        for (int i = 0; i < NRev; i++)
        {
            vsub[52][i] = v[52].cvsub(i);
            vsub[52][NRev + i] = v[52].ccsub(i);
        }
    
        v[53] = 0.4;

        v[52].sub(NRev, &sub[0], &sub[4]);
        v[54] = v[53] * v[52];

        for (int i = 0; i < NRev; i++)
        {
            vsub[54][i] = v[54].cvsub(i);
            vsub[54][NRev + i] = v[54].ccsub(i);
        }
    
        v[5].sub(NRev, &sub[0], &sub[4]);
        v[22].sub(NRev, &sub[8], &sub[12]);
        v[55] = v[5] * v[22];

        for (int i = 0; i < NRev; i++)
        {
            vsub[55][i] = v[55].cvsub(i);
            vsub[55][NRev + i] = v[55].ccsub(i);
        }
    
        v[55].sub(NRev, &sub[8], &sub[12]);

        v[56] = v[55] * v[0];

        for (int i = 0; i < NRev; i++)
        {
            vsub[56][i] = v[56].cvsub(i);
            vsub[56][NRev + i] = v[56].ccsub(i);
        }
    
        v[54].sub(NRev, &sub[0], &sub[4]);
        v[56].sub(NRev, &sub[8], &sub[12]);
        v[57] = v[54] - v[56];

        for (int i = 0; i < NRev; i++)
        {
            vsub[57][i] = v[57].cvsub(i);
            vsub[57][NRev + i] = v[57].ccsub(i);
        }
    
        //-----------------------------------------------------------------------
        // Evaluate subgradients with reverse sweep through computational graph

        for (int i = 0; i < L3; i++)
        {
            //vBar[i] = RevMC(v[i]);
            if (i == L3 - 1)
            {
                double Sub[NRev] = {1,0,0,1};
                vBar[i].subbar(NRev/2, &Sub[0], &Sub[2]);
            }
            else
            {
                vBar[i].subbar(NRev/2);
            }
        }

        vBar[54] = vBar[54] + vBar[57] * tmpv(vsub[57], 1);
        vBar[56] = vBar[56] + vBar[57] * tmpv(vsub[57], 2);
        vBar[55] = vBar[55] + vBar[56] * tmpv(vsub[56], 2);
        vBar[0] = vBar[0] + vBar[56] * tmpv(vsub[56], 1);
        vBar[5] = vBar[5] + vBar[55] * tmpv(vsub[55], 1);
        vBar[22] = vBar[22] + vBar[55] * tmpv(vsub[55], 2);
        vBar[53] = vBar[53] + vBar[54] * tmpv(vsub[54], 2);
        vBar[52] = vBar[52] + vBar[54] * tmpv(vsub[54], 1);
        vBar[51] = vBar[51] + vBar[52] * tmpv(vsub[52], 2);
        vBar[2] = vBar[2] + vBar[52] * tmpv(vsub[52], 1);
        vBar[49] = vBar[49] + vBar[50] * tmpv(vsub[50], 2);
        vBar[48] = vBar[48] + vBar[50] * tmpv(vsub[50], 1);
        vBar[45] = vBar[45] + vBar[48] * tmpv(vsub[48], 1);
        vBar[47] = vBar[47] + vBar[48] * tmpv(vsub[48], 2);
        vBar[46] = vBar[46] + vBar[47] * tmpv(vsub[47], 2);
        vBar[42] = vBar[42] + vBar[47] * tmpv(vsub[47], 1);
        vBar[43] = vBar[43] + vBar[45] * tmpv(vsub[45], 1);
        vBar[44] = vBar[44] + vBar[45] * tmpv(vsub[45], 2);
        vBar[4] = vBar[4] + vBar[43] * tmpv(vsub[43], 2);
        vBar[3] = vBar[3] + vBar[43] * tmpv(vsub[43], 1);
        vBar[37] = vBar[37] + vBar[42] * tmpv(vsub[42], 1);
        vBar[41] = vBar[41] + vBar[42] * tmpv(vsub[42], 2);
        vBar[40] = vBar[40] + vBar[41] * tmpv(vsub[41], 2);
        vBar[1] = vBar[1] + vBar[41] * tmpv(vsub[41], 1);
        vBar[39] = vBar[39] + vBar[40] * tmpv(vsub[40], 2);
        vBar[34] = vBar[34] + vBar[40] * tmpv(vsub[40], 1);
        vBar[10] = vBar[10] + vBar[39] * tmpv(vsub[39], 1);
        vBar[38] = vBar[38] + vBar[39] * tmpv(vsub[39], 2);
        vBar[35] = vBar[35] + vBar[37] * tmpv(vsub[37], 1);
        vBar[36] = vBar[36] + vBar[37] * tmpv(vsub[37], 2);
        vBar[4] = vBar[4] + vBar[35] * tmpv(vsub[35], 2);
        vBar[3] = vBar[3] + vBar[35] * tmpv(vsub[35], 1);
        vBar[33] = vBar[33] + vBar[34] * tmpv(vsub[34], 2);
        vBar[32] = vBar[32] + vBar[34] * tmpv(vsub[34], 1);
        vBar[31] = vBar[31] + vBar[32] * tmpv(vsub[32], 2);
        vBar[30] = vBar[30] + vBar[32] * tmpv(vsub[32], 1);
        vBar[29] = vBar[29] + vBar[30] * tmpv(vsub[30], 2);
        vBar[27] = vBar[27] + vBar[30] * tmpv(vsub[30], 1);
        vBar[28] = vBar[28] + vBar[29] * tmpv(vsub[29], 2);
        vBar[25] = vBar[25] + vBar[29] * tmpv(vsub[29], 1);
        vBar[3] = vBar[3] + vBar[27] * tmpv(vsub[27], 1);
        vBar[26] = vBar[26] + vBar[27] * tmpv(vsub[27], 2);
        vBar[11] = vBar[11] + vBar[25] * tmpv(vsub[25], 1);
        vBar[24] = vBar[24] + vBar[25] * tmpv(vsub[25], 2);
        vBar[23] = vBar[23] + vBar[24] * tmpv(vsub[24], 2);
        vBar[3] = vBar[3] + vBar[24] * tmpv(vsub[24], 1);
        vBar[21] = vBar[21] + vBar[22] * tmpv(vsub[22], 2);
        vBar[20] = vBar[20] + vBar[22] * tmpv(vsub[22], 1);
        vBar[19] = vBar[19] + vBar[20] * tmpv(vsub[20], 2);
        vBar[18] = vBar[18] + vBar[20] * tmpv(vsub[20], 1);
        vBar[17] = vBar[17] + vBar[18] * tmpv(vsub[18], 2);
        vBar[16] = vBar[16] + vBar[18] * tmpv(vsub[18], 1);
        vBar[15] = vBar[15] + vBar[16] * tmpv(vsub[16], 2);
        vBar[14] = vBar[14] + vBar[16] * tmpv(vsub[16], 1);
        vBar[13] = vBar[13] + vBar[14] * tmpv(vsub[14], 2);
        vBar[2] = vBar[2] + vBar[14] * tmpv(vsub[14], 1);
    
        break;

    case 3:
        v[0] = xMC[0];
        v[1] = xMC[1];
        v[2] = xMC[2];
        v[3] = xMC[3];
        v[4] = xMC[4];
        v[5] = pMC[0];
        v[6] = pMC[1];
        v[7] = pMC[2];
        v[8] = pMC[3];
        v[9] = pMC[4];
        v[10] = pMC[5];
        v[11] = pMC[6];
        v[12] = pMC[7];
        v[13] = 1.0;


        v[14] = v[13] / v[2];

        for (int i = 0; i < NRev; i++)
        {
            vsub[14][i] = v[14].cvsub(i);
            vsub[14][NRev + i] = v[14].ccsub(i);
        }
    
        v[15] = 7.1;

        v[14].sub(NRev, &sub[0], &sub[4]);
        v[16] = v[15] * v[14];

        for (int i = 0; i < NRev; i++)
        {
            vsub[16][i] = v[16].cvsub(i);
            vsub[16][NRev + i] = v[16].ccsub(i);
        }
    
        v[17] = 1.0;

        v[16].sub(NRev, &sub[0], &sub[4]);
        v[18] = v[17] + v[16];

        for (int i = 0; i < NRev; i++)
        {
            vsub[18][i] = v[18].cvsub(i);
            vsub[18][NRev + i] = v[18].ccsub(i);
        }
    
        v[19] = 1.0;

        v[18].sub(NRev, &sub[0], &sub[4]);
        v[20] = v[19] / v[18];

        for (int i = 0; i < NRev; i++)
        {
            vsub[20][i] = v[20].cvsub(i);
            vsub[20][NRev + i] = v[20].ccsub(i);
        }
    
        v[21] = 1.2;

        v[20].sub(NRev, &sub[0], &sub[4]);
        v[22] = v[21] * v[20];

        for (int i = 0; i < NRev; i++)
        {
            vsub[22][i] = v[22].cvsub(i);
            vsub[22][NRev + i] = v[22].ccsub(i);
        }
    
        v[23] = 1.0;


        v[24] = v[23] / v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[24][i] = v[24].cvsub(i);
            vsub[24][NRev + i] = v[24].ccsub(i);
        }
    
        v[11].sub(NRev, &sub[0], &sub[4]);
        v[24].sub(NRev, &sub[8], &sub[12]);
        v[25] = v[11] * v[24];

        for (int i = 0; i < NRev; i++)
        {
            vsub[25][i] = v[25].cvsub(i);
            vsub[25][NRev + i] = v[25].ccsub(i);
        }
    
        v[26] = 0.00390625;


        v[27] = v[3] * v[26];

        for (int i = 0; i < NRev; i++)
        {
            vsub[27][i] = v[27].cvsub(i);
            vsub[27][NRev + i] = v[27].ccsub(i);
        }
    
        v[28] = 1.0;

        v[25].sub(NRev, &sub[0], &sub[4]);
        v[29] = v[28] + v[25];

        for (int i = 0; i < NRev; i++)
        {
            vsub[29][i] = v[29].cvsub(i);
            vsub[29][NRev + i] = v[29].ccsub(i);
        }
    
        v[29].sub(NRev, &sub[8], &sub[12]);
        v[27].sub(NRev, &sub[0], &sub[4]);
        v[30] = v[29] + v[27];

        for (int i = 0; i < NRev; i++)
        {
            vsub[30][i] = v[30].cvsub(i);
            vsub[30][NRev + i] = v[30].ccsub(i);
        }
    
        v[31] = 1.0;

        v[30].sub(NRev, &sub[0], &sub[4]);
        v[32] = v[31] / v[30];

        for (int i = 0; i < NRev; i++)
        {
            vsub[32][i] = v[32].cvsub(i);
            vsub[32][NRev + i] = v[32].ccsub(i);
        }
    
        v[33] = 0.74;

        v[32].sub(NRev, &sub[0], &sub[4]);
        v[34] = v[33] * v[32];

        for (int i = 0; i < NRev; i++)
        {
            vsub[34][i] = v[34].cvsub(i);
            vsub[34][NRev + i] = v[34].ccsub(i);
        }
    


        v[35] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[35][i] = v[35].cvsub(i);
            vsub[35][NRev + i] = v[35].ccsub(i);
        }
    
        v[36] = 34.0;
        v[35].sub(NRev, &sub[0], &sub[4]);

        v[37] = v[35] - v[36];

        for (int i = 0; i < NRev; i++)
        {
            vsub[37][i] = v[37].cvsub(i);
            vsub[37][NRev + i] = v[37].ccsub(i);
        }
    
        v[38] = 0.050505050505050504;
        v[10].sub(NRev, &sub[0], &sub[4]);

        v[39] = v[10] * v[38];

        for (int i = 0; i < NRev; i++)
        {
            vsub[39][i] = v[39].cvsub(i);
            vsub[39][NRev + i] = v[39].ccsub(i);
        }
    
        v[39].sub(NRev, &sub[8], &sub[12]);
        v[34].sub(NRev, &sub[0], &sub[4]);
        v[40] = v[39] * v[34];

        for (int i = 0; i < NRev; i++)
        {
            vsub[40][i] = v[40].cvsub(i);
            vsub[40][NRev + i] = v[40].ccsub(i);
        }
    
        v[40].sub(NRev, &sub[8], &sub[12]);

        v[41] = v[40] * v[1];

        for (int i = 0; i < NRev; i++)
        {
            vsub[41][i] = v[41].cvsub(i);
            vsub[41][NRev + i] = v[41].ccsub(i);
        }
    
        v[37].sub(NRev, &sub[0], &sub[4]);
        v[41].sub(NRev, &sub[8], &sub[12]);
        v[42] = v[37] + v[41];

        for (int i = 0; i < NRev; i++)
        {
            vsub[42][i] = v[42].cvsub(i);
            vsub[42][NRev + i] = v[42].ccsub(i);
        }
    


        v[43] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[43][i] = v[43].cvsub(i);
            vsub[43][NRev + i] = v[43].ccsub(i);
        }
    
        v[44] = 50.0;
        v[43].sub(NRev, &sub[0], &sub[4]);

        v[45] = v[43] - v[44];

        for (int i = 0; i < NRev; i++)
        {
            vsub[45][i] = v[45].cvsub(i);
            vsub[45][NRev + i] = v[45].ccsub(i);
        }
    
        v[46] = 0.5;

        v[42].sub(NRev, &sub[0], &sub[4]);
        v[47] = v[46] * v[42];

        for (int i = 0; i < NRev; i++)
        {
            vsub[47][i] = v[47].cvsub(i);
            vsub[47][NRev + i] = v[47].ccsub(i);
        }
    
        v[45].sub(NRev, &sub[0], &sub[4]);
        v[47].sub(NRev, &sub[8], &sub[12]);
        v[48] = v[45] - v[47];

        for (int i = 0; i < NRev; i++)
        {
            vsub[48][i] = v[48].cvsub(i);
            vsub[48][NRev + i] = v[48].ccsub(i);
        }
    
        v[49] = 19.8;

        v[48].sub(NRev, &sub[0], &sub[4]);
        v[50] = v[49] * v[48];

        for (int i = 0; i < NRev; i++)
        {
            vsub[50][i] = v[50].cvsub(i);
            vsub[50][NRev + i] = v[50].ccsub(i);
        }
    
        v[51] = 80.0;


        v[52] = v[51] - v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[52][i] = v[52].cvsub(i);
            vsub[52][NRev + i] = v[52].ccsub(i);
        }
    
        v[53] = 0.4;

        v[52].sub(NRev, &sub[0], &sub[4]);
        v[54] = v[53] * v[52];

        for (int i = 0; i < NRev; i++)
        {
            vsub[54][i] = v[54].cvsub(i);
            vsub[54][NRev + i] = v[54].ccsub(i);
        }
    
        v[6].sub(NRev, &sub[0], &sub[4]);
        v[22].sub(NRev, &sub[8], &sub[12]);
        v[55] = v[6] * v[22];

        for (int i = 0; i < NRev; i++)
        {
            vsub[55][i] = v[55].cvsub(i);
            vsub[55][NRev + i] = v[55].ccsub(i);
        }
    
        v[55].sub(NRev, &sub[8], &sub[12]);

        v[56] = v[55] * v[0];

        for (int i = 0; i < NRev; i++)
        {
            vsub[56][i] = v[56].cvsub(i);
            vsub[56][NRev + i] = v[56].ccsub(i);
        }
    
        v[54].sub(NRev, &sub[0], &sub[4]);
        v[56].sub(NRev, &sub[8], &sub[12]);
        v[57] = v[54] + v[56];

        for (int i = 0; i < NRev; i++)
        {
            vsub[57][i] = v[57].cvsub(i);
            vsub[57][NRev + i] = v[57].ccsub(i);
        }
    
        v[7].sub(NRev, &sub[0], &sub[4]);
        v[34].sub(NRev, &sub[8], &sub[12]);
        v[58] = v[7] * v[34];

        for (int i = 0; i < NRev; i++)
        {
            vsub[58][i] = v[58].cvsub(i);
            vsub[58][NRev + i] = v[58].ccsub(i);
        }
    
        v[58].sub(NRev, &sub[8], &sub[12]);

        v[59] = v[58] * v[1];

        for (int i = 0; i < NRev; i++)
        {
            vsub[59][i] = v[59].cvsub(i);
            vsub[59][NRev + i] = v[59].ccsub(i);
        }
    
        v[57].sub(NRev, &sub[0], &sub[4]);
        v[59].sub(NRev, &sub[8], &sub[12]);
        v[60] = v[57] - v[59];

        for (int i = 0; i < NRev; i++)
        {
            vsub[60][i] = v[60].cvsub(i);
            vsub[60][NRev + i] = v[60].ccsub(i);
        }
    
        //-----------------------------------------------------------------------
        // Evaluate subgradients with reverse sweep through computational graph

        for (int i = 0; i < L4; i++)
        {
            //vBar[i] = RevMC(v[i]);
            if (i == L4 - 1)
            {
                double Sub[NRev] = {1,0,0,1};
                vBar[i].subbar(NRev/2, &Sub[0], &Sub[2]);
            }
            else
            {
                vBar[i].subbar(NRev/2);
            }
        }

        vBar[57] = vBar[57] + vBar[60] * tmpv(vsub[60], 1);
        vBar[59] = vBar[59] + vBar[60] * tmpv(vsub[60], 2);
        vBar[58] = vBar[58] + vBar[59] * tmpv(vsub[59], 2);
        vBar[1] = vBar[1] + vBar[59] * tmpv(vsub[59], 1);
        vBar[7] = vBar[7] + vBar[58] * tmpv(vsub[58], 1);
        vBar[34] = vBar[34] + vBar[58] * tmpv(vsub[58], 2);
        vBar[54] = vBar[54] + vBar[57] * tmpv(vsub[57], 1);
        vBar[56] = vBar[56] + vBar[57] * tmpv(vsub[57], 2);
        vBar[55] = vBar[55] + vBar[56] * tmpv(vsub[56], 2);
        vBar[0] = vBar[0] + vBar[56] * tmpv(vsub[56], 1);
        vBar[6] = vBar[6] + vBar[55] * tmpv(vsub[55], 1);
        vBar[22] = vBar[22] + vBar[55] * tmpv(vsub[55], 2);
        vBar[53] = vBar[53] + vBar[54] * tmpv(vsub[54], 2);
        vBar[52] = vBar[52] + vBar[54] * tmpv(vsub[54], 1);
        vBar[51] = vBar[51] + vBar[52] * tmpv(vsub[52], 2);
        vBar[3] = vBar[3] + vBar[52] * tmpv(vsub[52], 1);
        vBar[49] = vBar[49] + vBar[50] * tmpv(vsub[50], 2);
        vBar[48] = vBar[48] + vBar[50] * tmpv(vsub[50], 1);
        vBar[45] = vBar[45] + vBar[48] * tmpv(vsub[48], 1);
        vBar[47] = vBar[47] + vBar[48] * tmpv(vsub[48], 2);
        vBar[46] = vBar[46] + vBar[47] * tmpv(vsub[47], 2);
        vBar[42] = vBar[42] + vBar[47] * tmpv(vsub[47], 1);
        vBar[43] = vBar[43] + vBar[45] * tmpv(vsub[45], 1);
        vBar[44] = vBar[44] + vBar[45] * tmpv(vsub[45], 2);
        vBar[4] = vBar[4] + vBar[43] * tmpv(vsub[43], 2);
        vBar[3] = vBar[3] + vBar[43] * tmpv(vsub[43], 1);
        vBar[37] = vBar[37] + vBar[42] * tmpv(vsub[42], 1);
        vBar[41] = vBar[41] + vBar[42] * tmpv(vsub[42], 2);
        vBar[40] = vBar[40] + vBar[41] * tmpv(vsub[41], 2);
        vBar[1] = vBar[1] + vBar[41] * tmpv(vsub[41], 1);
        vBar[39] = vBar[39] + vBar[40] * tmpv(vsub[40], 2);
        vBar[34] = vBar[34] + vBar[40] * tmpv(vsub[40], 1);
        vBar[10] = vBar[10] + vBar[39] * tmpv(vsub[39], 1);
        vBar[38] = vBar[38] + vBar[39] * tmpv(vsub[39], 2);
        vBar[35] = vBar[35] + vBar[37] * tmpv(vsub[37], 1);
        vBar[36] = vBar[36] + vBar[37] * tmpv(vsub[37], 2);
        vBar[4] = vBar[4] + vBar[35] * tmpv(vsub[35], 2);
        vBar[3] = vBar[3] + vBar[35] * tmpv(vsub[35], 1);
        vBar[33] = vBar[33] + vBar[34] * tmpv(vsub[34], 2);
        vBar[32] = vBar[32] + vBar[34] * tmpv(vsub[34], 1);
        vBar[31] = vBar[31] + vBar[32] * tmpv(vsub[32], 2);
        vBar[30] = vBar[30] + vBar[32] * tmpv(vsub[32], 1);
        vBar[29] = vBar[29] + vBar[30] * tmpv(vsub[30], 2);
        vBar[27] = vBar[27] + vBar[30] * tmpv(vsub[30], 1);
        vBar[28] = vBar[28] + vBar[29] * tmpv(vsub[29], 2);
        vBar[25] = vBar[25] + vBar[29] * tmpv(vsub[29], 1);
        vBar[3] = vBar[3] + vBar[27] * tmpv(vsub[27], 1);
        vBar[26] = vBar[26] + vBar[27] * tmpv(vsub[27], 2);
        vBar[11] = vBar[11] + vBar[25] * tmpv(vsub[25], 1);
        vBar[24] = vBar[24] + vBar[25] * tmpv(vsub[25], 2);
        vBar[23] = vBar[23] + vBar[24] * tmpv(vsub[24], 2);
        vBar[3] = vBar[3] + vBar[24] * tmpv(vsub[24], 1);
        vBar[21] = vBar[21] + vBar[22] * tmpv(vsub[22], 2);
        vBar[20] = vBar[20] + vBar[22] * tmpv(vsub[22], 1);
        vBar[19] = vBar[19] + vBar[20] * tmpv(vsub[20], 2);
        vBar[18] = vBar[18] + vBar[20] * tmpv(vsub[20], 1);
        vBar[17] = vBar[17] + vBar[18] * tmpv(vsub[18], 2);
        vBar[16] = vBar[16] + vBar[18] * tmpv(vsub[18], 1);
        vBar[15] = vBar[15] + vBar[16] * tmpv(vsub[16], 2);
        vBar[14] = vBar[14] + vBar[16] * tmpv(vsub[16], 1);
        vBar[13] = vBar[13] + vBar[14] * tmpv(vsub[14], 2);
        vBar[2] = vBar[2] + vBar[14] * tmpv(vsub[14], 1);
    
        break;

    case 4:
        v[0] = xMC[0];
        v[1] = xMC[1];
        v[2] = xMC[2];
        v[3] = xMC[3];
        v[4] = xMC[4];
        v[5] = pMC[0];
        v[6] = pMC[1];
        v[7] = pMC[2];
        v[8] = pMC[3];
        v[9] = pMC[4];
        v[10] = pMC[5];
        v[11] = pMC[6];
        v[12] = pMC[7];
        v[13] = 1.0;


        v[14] = v[13] / v[2];

        for (int i = 0; i < NRev; i++)
        {
            vsub[14][i] = v[14].cvsub(i);
            vsub[14][NRev + i] = v[14].ccsub(i);
        }
    
        v[15] = 7.1;

        v[14].sub(NRev, &sub[0], &sub[4]);
        v[16] = v[15] * v[14];

        for (int i = 0; i < NRev; i++)
        {
            vsub[16][i] = v[16].cvsub(i);
            vsub[16][NRev + i] = v[16].ccsub(i);
        }
    
        v[17] = 1.0;

        v[16].sub(NRev, &sub[0], &sub[4]);
        v[18] = v[17] + v[16];

        for (int i = 0; i < NRev; i++)
        {
            vsub[18][i] = v[18].cvsub(i);
            vsub[18][NRev + i] = v[18].ccsub(i);
        }
    
        v[19] = 1.0;

        v[18].sub(NRev, &sub[0], &sub[4]);
        v[20] = v[19] / v[18];

        for (int i = 0; i < NRev; i++)
        {
            vsub[20][i] = v[20].cvsub(i);
            vsub[20][NRev + i] = v[20].ccsub(i);
        }
    
        v[21] = 1.2;

        v[20].sub(NRev, &sub[0], &sub[4]);
        v[22] = v[21] * v[20];

        for (int i = 0; i < NRev; i++)
        {
            vsub[22][i] = v[22].cvsub(i);
            vsub[22][NRev + i] = v[22].ccsub(i);
        }
    
        v[23] = 1.0;


        v[24] = v[23] / v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[24][i] = v[24].cvsub(i);
            vsub[24][NRev + i] = v[24].ccsub(i);
        }
    
        v[11].sub(NRev, &sub[0], &sub[4]);
        v[24].sub(NRev, &sub[8], &sub[12]);
        v[25] = v[11] * v[24];

        for (int i = 0; i < NRev; i++)
        {
            vsub[25][i] = v[25].cvsub(i);
            vsub[25][NRev + i] = v[25].ccsub(i);
        }
    
        v[26] = 0.00390625;


        v[27] = v[3] * v[26];

        for (int i = 0; i < NRev; i++)
        {
            vsub[27][i] = v[27].cvsub(i);
            vsub[27][NRev + i] = v[27].ccsub(i);
        }
    
        v[28] = 1.0;

        v[25].sub(NRev, &sub[0], &sub[4]);
        v[29] = v[28] + v[25];

        for (int i = 0; i < NRev; i++)
        {
            vsub[29][i] = v[29].cvsub(i);
            vsub[29][NRev + i] = v[29].ccsub(i);
        }
    
        v[29].sub(NRev, &sub[8], &sub[12]);
        v[27].sub(NRev, &sub[0], &sub[4]);
        v[30] = v[29] + v[27];

        for (int i = 0; i < NRev; i++)
        {
            vsub[30][i] = v[30].cvsub(i);
            vsub[30][NRev + i] = v[30].ccsub(i);
        }
    
        v[31] = 1.0;

        v[30].sub(NRev, &sub[0], &sub[4]);
        v[32] = v[31] / v[30];

        for (int i = 0; i < NRev; i++)
        {
            vsub[32][i] = v[32].cvsub(i);
            vsub[32][NRev + i] = v[32].ccsub(i);
        }
    
        v[33] = 0.74;

        v[32].sub(NRev, &sub[0], &sub[4]);
        v[34] = v[33] * v[32];

        for (int i = 0; i < NRev; i++)
        {
            vsub[34][i] = v[34].cvsub(i);
            vsub[34][NRev + i] = v[34].ccsub(i);
        }
    


        v[35] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[35][i] = v[35].cvsub(i);
            vsub[35][NRev + i] = v[35].ccsub(i);
        }
    
        v[36] = 34.0;
        v[35].sub(NRev, &sub[0], &sub[4]);

        v[37] = v[35] - v[36];

        for (int i = 0; i < NRev; i++)
        {
            vsub[37][i] = v[37].cvsub(i);
            vsub[37][NRev + i] = v[37].ccsub(i);
        }
    
        v[38] = 0.050505050505050504;
        v[10].sub(NRev, &sub[0], &sub[4]);

        v[39] = v[10] * v[38];

        for (int i = 0; i < NRev; i++)
        {
            vsub[39][i] = v[39].cvsub(i);
            vsub[39][NRev + i] = v[39].ccsub(i);
        }
    
        v[39].sub(NRev, &sub[8], &sub[12]);
        v[34].sub(NRev, &sub[0], &sub[4]);
        v[40] = v[39] * v[34];

        for (int i = 0; i < NRev; i++)
        {
            vsub[40][i] = v[40].cvsub(i);
            vsub[40][NRev + i] = v[40].ccsub(i);
        }
    
        v[40].sub(NRev, &sub[8], &sub[12]);

        v[41] = v[40] * v[1];

        for (int i = 0; i < NRev; i++)
        {
            vsub[41][i] = v[41].cvsub(i);
            vsub[41][NRev + i] = v[41].ccsub(i);
        }
    
        v[37].sub(NRev, &sub[0], &sub[4]);
        v[41].sub(NRev, &sub[8], &sub[12]);
        v[42] = v[37] + v[41];

        for (int i = 0; i < NRev; i++)
        {
            vsub[42][i] = v[42].cvsub(i);
            vsub[42][NRev + i] = v[42].ccsub(i);
        }
    


        v[43] = v[4] + v[3];

        for (int i = 0; i < NRev; i++)
        {
            vsub[43][i] = v[43].cvsub(i);
            vsub[43][NRev + i] = v[43].ccsub(i);
        }
    
        v[44] = 50.0;
        v[43].sub(NRev, &sub[0], &sub[4]);

        v[45] = v[43] - v[44];

        for (int i = 0; i < NRev; i++)
        {
            vsub[45][i] = v[45].cvsub(i);
            vsub[45][NRev + i] = v[45].ccsub(i);
        }
    
        v[46] = 0.5;

        v[42].sub(NRev, &sub[0], &sub[4]);
        v[47] = v[46] * v[42];

        for (int i = 0; i < NRev; i++)
        {
            vsub[47][i] = v[47].cvsub(i);
            vsub[47][NRev + i] = v[47].ccsub(i);
        }
    
        v[45].sub(NRev, &sub[0], &sub[4]);
        v[47].sub(NRev, &sub[8], &sub[12]);
        v[48] = v[45] - v[47];

        for (int i = 0; i < NRev; i++)
        {
            vsub[48][i] = v[48].cvsub(i);
            vsub[48][NRev + i] = v[48].ccsub(i);
        }
    
        v[49] = 19.8;

        v[48].sub(NRev, &sub[0], &sub[4]);
        v[50] = v[49] * v[48];

        for (int i = 0; i < NRev; i++)
        {
            vsub[50][i] = v[50].cvsub(i);
            vsub[50][NRev + i] = v[50].ccsub(i);
        }
    
        v[51] = -0.4;


        v[52] = v[51] * v[4];

        for (int i = 0; i < NRev; i++)
        {
            vsub[52][i] = v[52].cvsub(i);
            vsub[52][NRev + i] = v[52].ccsub(i);
        }
    
        v[52].sub(NRev, &sub[8], &sub[12]);
        v[50].sub(NRev, &sub[0], &sub[4]);
        v[53] = v[52] - v[50];

        for (int i = 0; i < NRev; i++)
        {
            vsub[53][i] = v[53].cvsub(i);
            vsub[53][NRev + i] = v[53].ccsub(i);
        }
    
        v[8].sub(NRev, &sub[0], &sub[4]);
        v[22].sub(NRev, &sub[8], &sub[12]);
        v[54] = v[8] * v[22];

        for (int i = 0; i < NRev; i++)
        {
            vsub[54][i] = v[54].cvsub(i);
            vsub[54][NRev + i] = v[54].ccsub(i);
        }
    
        v[54].sub(NRev, &sub[8], &sub[12]);

        v[55] = v[54] * v[0];

        for (int i = 0; i < NRev; i++)
        {
            vsub[55][i] = v[55].cvsub(i);
            vsub[55][NRev + i] = v[55].ccsub(i);
        }
    
        v[9].sub(NRev, &sub[0], &sub[4]);
        v[34].sub(NRev, &sub[8], &sub[12]);
        v[56] = v[9] * v[34];

        for (int i = 0; i < NRev; i++)
        {
            vsub[56][i] = v[56].cvsub(i);
            vsub[56][NRev + i] = v[56].ccsub(i);
        }
    
        v[56].sub(NRev, &sub[8], &sub[12]);

        v[57] = v[56] * v[1];

        for (int i = 0; i < NRev; i++)
        {
            vsub[57][i] = v[57].cvsub(i);
            vsub[57][NRev + i] = v[57].ccsub(i);
        }
    
        v[53].sub(NRev, &sub[0], &sub[4]);
        v[55].sub(NRev, &sub[8], &sub[12]);
        v[58] = v[53] + v[55];

        for (int i = 0; i < NRev; i++)
        {
            vsub[58][i] = v[58].cvsub(i);
            vsub[58][NRev + i] = v[58].ccsub(i);
        }
    
        v[58].sub(NRev, &sub[8], &sub[12]);
        v[57].sub(NRev, &sub[0], &sub[4]);
        v[59] = v[58] + v[57];

        for (int i = 0; i < NRev; i++)
        {
            vsub[59][i] = v[59].cvsub(i);
            vsub[59][NRev + i] = v[59].ccsub(i);
        }
    
        //-----------------------------------------------------------------------
        // Evaluate subgradients with reverse sweep through computational graph

        for (int i = 0; i < L5; i++)
        {
            //vBar[i] = RevMC(v[i]);
            if (i == L5 - 1)
            {
                double Sub[NRev] = {1,0,0,1};
                vBar[i].subbar(NRev/2, &Sub[0], &Sub[2]);
            }
            else
            {
                vBar[i].subbar(NRev/2);
            }
        }

        vBar[58] = vBar[58] + vBar[59] * tmpv(vsub[59], 2);
        vBar[57] = vBar[57] + vBar[59] * tmpv(vsub[59], 1);
        vBar[53] = vBar[53] + vBar[58] * tmpv(vsub[58], 1);
        vBar[55] = vBar[55] + vBar[58] * tmpv(vsub[58], 2);
        vBar[56] = vBar[56] + vBar[57] * tmpv(vsub[57], 2);
        vBar[1] = vBar[1] + vBar[57] * tmpv(vsub[57], 1);
        vBar[9] = vBar[9] + vBar[56] * tmpv(vsub[56], 1);
        vBar[34] = vBar[34] + vBar[56] * tmpv(vsub[56], 2);
        vBar[54] = vBar[54] + vBar[55] * tmpv(vsub[55], 2);
        vBar[0] = vBar[0] + vBar[55] * tmpv(vsub[55], 1);
        vBar[8] = vBar[8] + vBar[54] * tmpv(vsub[54], 1);
        vBar[22] = vBar[22] + vBar[54] * tmpv(vsub[54], 2);
        vBar[52] = vBar[52] + vBar[53] * tmpv(vsub[53], 2);
        vBar[50] = vBar[50] + vBar[53] * tmpv(vsub[53], 1);
        vBar[51] = vBar[51] + vBar[52] * tmpv(vsub[52], 2);
        vBar[4] = vBar[4] + vBar[52] * tmpv(vsub[52], 1);
        vBar[49] = vBar[49] + vBar[50] * tmpv(vsub[50], 2);
        vBar[48] = vBar[48] + vBar[50] * tmpv(vsub[50], 1);
        vBar[45] = vBar[45] + vBar[48] * tmpv(vsub[48], 1);
        vBar[47] = vBar[47] + vBar[48] * tmpv(vsub[48], 2);
        vBar[46] = vBar[46] + vBar[47] * tmpv(vsub[47], 2);
        vBar[42] = vBar[42] + vBar[47] * tmpv(vsub[47], 1);
        vBar[43] = vBar[43] + vBar[45] * tmpv(vsub[45], 1);
        vBar[44] = vBar[44] + vBar[45] * tmpv(vsub[45], 2);
        vBar[4] = vBar[4] + vBar[43] * tmpv(vsub[43], 2);
        vBar[3] = vBar[3] + vBar[43] * tmpv(vsub[43], 1);
        vBar[37] = vBar[37] + vBar[42] * tmpv(vsub[42], 1);
        vBar[41] = vBar[41] + vBar[42] * tmpv(vsub[42], 2);
        vBar[40] = vBar[40] + vBar[41] * tmpv(vsub[41], 2);
        vBar[1] = vBar[1] + vBar[41] * tmpv(vsub[41], 1);
        vBar[39] = vBar[39] + vBar[40] * tmpv(vsub[40], 2);
        vBar[34] = vBar[34] + vBar[40] * tmpv(vsub[40], 1);
        vBar[10] = vBar[10] + vBar[39] * tmpv(vsub[39], 1);
        vBar[38] = vBar[38] + vBar[39] * tmpv(vsub[39], 2);
        vBar[35] = vBar[35] + vBar[37] * tmpv(vsub[37], 1);
        vBar[36] = vBar[36] + vBar[37] * tmpv(vsub[37], 2);
        vBar[4] = vBar[4] + vBar[35] * tmpv(vsub[35], 2);
        vBar[3] = vBar[3] + vBar[35] * tmpv(vsub[35], 1);
        vBar[33] = vBar[33] + vBar[34] * tmpv(vsub[34], 2);
        vBar[32] = vBar[32] + vBar[34] * tmpv(vsub[34], 1);
        vBar[31] = vBar[31] + vBar[32] * tmpv(vsub[32], 2);
        vBar[30] = vBar[30] + vBar[32] * tmpv(vsub[32], 1);
        vBar[29] = vBar[29] + vBar[30] * tmpv(vsub[30], 2);
        vBar[27] = vBar[27] + vBar[30] * tmpv(vsub[30], 1);
        vBar[28] = vBar[28] + vBar[29] * tmpv(vsub[29], 2);
        vBar[25] = vBar[25] + vBar[29] * tmpv(vsub[29], 1);
        vBar[3] = vBar[3] + vBar[27] * tmpv(vsub[27], 1);
        vBar[26] = vBar[26] + vBar[27] * tmpv(vsub[27], 2);
        vBar[11] = vBar[11] + vBar[25] * tmpv(vsub[25], 1);
        vBar[24] = vBar[24] + vBar[25] * tmpv(vsub[25], 2);
        vBar[23] = vBar[23] + vBar[24] * tmpv(vsub[24], 2);
        vBar[3] = vBar[3] + vBar[24] * tmpv(vsub[24], 1);
        vBar[21] = vBar[21] + vBar[22] * tmpv(vsub[22], 2);
        vBar[20] = vBar[20] + vBar[22] * tmpv(vsub[22], 1);
        vBar[19] = vBar[19] + vBar[20] * tmpv(vsub[20], 2);
        vBar[18] = vBar[18] + vBar[20] * tmpv(vsub[20], 1);
        vBar[17] = vBar[17] + vBar[18] * tmpv(vsub[18], 2);
        vBar[16] = vBar[16] + vBar[18] * tmpv(vsub[18], 1);
        vBar[15] = vBar[15] + vBar[16] * tmpv(vsub[16], 2);
        vBar[14] = vBar[14] + vBar[16] * tmpv(vsub[16], 1);
        vBar[13] = vBar[13] + vBar[14] * tmpv(vsub[14], 2);
        vBar[2] = vBar[2] + vBar[14] * tmpv(vsub[14], 1);
    
        break;

    }
    
    for (int j = 0; j < NP; j++)
    {
        Ith(adcvcc, j + 1) = vBar[j + NX].cvsubbar(0) + vBar[j + NX].cvsubbar(1);
        Ith(adcvcc, NP + j + 1) = vBar[j + NX].ccsubbar(0) + vBar[j + NX].ccsubbar(1);
    }
    
    for(int i = 0; i < L; i++) {
        delete[] vsub[i];
    }
    delete[] vsub;
    
    SUNContext_Free(&sunctx);
    return adcvcc;
    
}

/*
* Generate tmpcv/tmpcc values in forward sweep
*/
MC tmpv(double* vsub, int i)
{
    MC MC1;
    MC1.sub(NRev/2, &vsub[(i - 1) * 2], &vsub[(i - 1) * 2 + 4]);
    return MC1;
}

